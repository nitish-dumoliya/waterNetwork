Water Network: d8_HG_SP_3_4 

Testing bound_push=0.0002238955698163348, bound_frac=0.003872060803458027
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0002238955698163348
bound_frac: 0.003872060803458027
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0002238955698163348
bound_frac = 0.003872060803458027
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6940447.528259844
Testing bound_push=0.0003825078857095628, bound_frac=0.007323191048970892
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0003825078857095628
bound_frac: 0.007323191048970892
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0003825078857095628
bound_frac = 0.007323191048970892
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.564662144
Testing bound_push=0.0004191730048377303, bound_frac=0.00401916889421702
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004191730048377303
bound_frac: 0.00401916889421702
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004191730048377303
bound_frac = 0.00401916889421702
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6981324.071902294
Testing bound_push=0.0006953016770727115, bound_frac=0.005570218742296999
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006953016770727115
bound_frac: 0.005570218742296999
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006953016770727115
bound_frac = 0.005570218742296999
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.34178056
Testing bound_push=0.0009816539200175084, bound_frac=0.00743926919511442
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009816539200175084
bound_frac: 0.00743926919511442
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009816539200175084
bound_frac = 0.00743926919511442
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.583092054
Testing bound_push=0.000321938043746491, bound_frac=0.005195955203297652
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000321938043746491
bound_frac: 0.005195955203297652
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000321938043746491
bound_frac = 0.005195955203297652
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6977265.251479614
Testing bound_push=0.0008137128422820356, bound_frac=0.006407875395677878
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008137128422820356
bound_frac: 0.006407875395677878
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008137128422820356
bound_frac = 0.006407875395677878
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6987807.974570003
Testing bound_push=1e-06, bound_frac=0.004583150937953151
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 1e-06
bound_frac: 0.004583150937953151
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.004583150937953151
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6976418.486932549
Testing bound_push=0.000625324299674642, bound_frac=0.00408157817924129
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000625324299674642
bound_frac: 0.00408157817924129
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000625324299674642
bound_frac = 0.00408157817924129
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6963281.577762154
Testing bound_push=0.0009869327259805992, bound_frac=0.004604921107685191
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009869327259805992
bound_frac: 0.004604921107685191
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009869327259805992
bound_frac = 0.004604921107685191
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.583060128
Testing bound_push=0.00035636921025857313, bound_frac=0.005340151100244001
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00035636921025857313
bound_frac: 0.005340151100244001
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00035636921025857313
bound_frac = 0.005340151100244001
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971337.81621051
Testing bound_push=0.000760112004925799, bound_frac=0.0050558273813683455
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000760112004925799
bound_frac: 0.0050558273813683455
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000760112004925799
bound_frac = 0.0050558273813683455
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.705413402
Testing bound_push=1e-06, bound_frac=0.004675488636339463
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 1e-06
bound_frac: 0.004675488636339463
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.004675488636339463
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6976418.486932549
Testing bound_push=0.00043354253673079206, bound_frac=0.0038015643498992427
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00043354253673079206
bound_frac: 0.0038015643498992427
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00043354253673079206
bound_frac = 0.0038015643498992427
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.70585563
Testing bound_push=0.0009234362194467942, bound_frac=0.0029285892989881256
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009234362194467942
bound_frac: 0.0029285892989881256
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009234362194467942
bound_frac = 0.0029285892989881256
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6967336.841504456
Testing bound_push=0.00029383912149247846, bound_frac=0.004827598589777423
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00029383912149247846
bound_frac: 0.004827598589777423
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00029383912149247846
bound_frac = 0.004827598589777423
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.882772445
Testing bound_push=0.0007006856986500958, bound_frac=0.004430418533532529
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007006856986500958
bound_frac: 0.004430418533532529
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007006856986500958
bound_frac = 0.004430418533532529
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.729415773
Testing bound_push=1e-06, bound_frac=0.004516208757293501
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 1e-06
bound_frac: 0.004516208757293501
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.004516208757293501
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6976418.486932549
Testing bound_push=0.00035093724973605313, bound_frac=0.00448219136604267
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00035093724973605313
bound_frac: 0.00448219136604267
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00035093724973605313
bound_frac = 0.00448219136604267
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.706597135
Testing bound_push=0.0006044949515786615, bound_frac=0.002200134502710796
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006044949515786615
bound_frac: 0.002200134502710796
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006044949515786615
bound_frac = 0.002200134502710796
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.707455507
Testing bound_push=0.00024061155014239998, bound_frac=0.004198962356832644
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00024061155014239998
bound_frac: 0.004198962356832644
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00024061155014239998
bound_frac = 0.004198962356832644
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.583086543
Testing bound_push=0.0003147468792549165, bound_frac=0.005157930686605586
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0003147468792549165
bound_frac: 0.005157930686605586
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0003147468792549165
bound_frac = 0.005157930686605586
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6965489.756329963
Testing bound_push=1e-06, bound_frac=0.0044140294111521625
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 1e-06
bound_frac: 0.0044140294111521625
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.0044140294111521625
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6976418.486932549
Testing bound_push=0.00027674381771222424, bound_frac=0.0051640913008382675
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00027674381771222424
bound_frac: 0.0051640913008382675
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00027674381771222424
bound_frac = 0.0051640913008382675
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6984620.097798122
Testing bound_push=0.0005160282896631657, bound_frac=0.002232297848324467
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005160282896631657
bound_frac: 0.002232297848324467
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005160282896631657
bound_frac = 0.002232297848324467
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6966838.163807577
Testing bound_push=0.0002059326486959276, bound_frac=0.0037936067788860365
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0002059326486959276
bound_frac: 0.0037936067788860365
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0002059326486959276
bound_frac = 0.0037936067788860365
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.882782527
Testing bound_push=0.00012684624215766034, bound_frac=0.00644516791177617
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00012684624215766034
bound_frac: 0.00644516791177617
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00012684624215766034
bound_frac = 0.00644516791177617
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.70539092
Testing bound_push=7.128648218042617e-05, bound_frac=0.004292949711350453
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 7.128648218042617e-05
bound_frac: 0.004292949711350453
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 7.128648218042617e-05
bound_frac = 0.004292949711350453
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972323.108931781
Testing bound_push=0.0004081000597844133, bound_frac=0.004998637775292174
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004081000597844133
bound_frac: 0.004998637775292174
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004081000597844133
bound_frac = 0.004998637775292174
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.583102627
Testing bound_push=0.0003868714295252704, bound_frac=0.002980484217601413
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0003868714295252704
bound_frac: 0.002980484217601413
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0003868714295252704
bound_frac = 0.002980484217601413
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6987371.312448472
Stopping search: maximum iterations reached --> 5
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0002238955698163348
bound_frac: 0.003872060803458027
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0002238955698163348
bound_frac = 0.003872060803458027
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  6940447.528259844
Solve_result:  solved
Solve_time: 0.8831830000000025 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(44, 78)  True    69,40,448     75,28,219     0.69s       solved        No        40.0s
(38, 76)  True    69,40,448     82,91,495     0.28s       infeasible    No        40.31s
(78, 24)  True    69,40,448     90,21,770     0.85s       limit         No        41.18s
(2, 3)    True    69,40,448     1,08,85,948   0.85s       limit         No        42.07s
(41, 51)  True    69,40,448     82,48,221     0.37s       infeasible    No        42.47s
(27, 21)  True    69,40,448     74,03,200     0.28s       infeasible    No        42.78s
(58, 66)  True    69,40,448     72,38,794     0.31s       solved        No        43.13s
(60, 41)  True    69,40,448     69,75,353     0.26s       solved        No        43.42s
(19, 64)  True    69,40,448     81,52,367     0.9s        limit         No        44.35s
(30, 56)  True    69,40,448     82,07,392     0.85s       limit         No        45.25s
(77, 42)  True    69,40,448     85,47,880     0.67s       infeasible    No        45.95s
(42, 32)  True    69,40,448     70,56,479     0.85s       limit         No        46.83s
(45, 17)  True    69,40,448     65,07,929     0.21s       infeasible    No        47.06s
(35, 39)  True    69,40,448     69,18,388     0.26s       solved        Yes       47.35s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [35] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(39, 35)  True    69,18,388     69,06,332     0.34s       solved        Yes       47.72s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39, 35]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        

**********************************Final best results******************************************

Water Network: d8_HG_SP_3_4
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,62       |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_2,63       |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_3,2        |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_4,65       |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_4,66       |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_5,20       |                1e-08 |          -1.329e-05  |
+-----------------+----------------------+----------------------+
| con2_6,36       |                0     |          -0.00458211 |
+-----------------+----------------------+----------------------+
| con2_7,48       |                1e-08 |          -1e-08      |
+-----------------+----------------------+----------------------+
| con2_8,47       |                1e-08 |          -0.00294886 |
+-----------------+----------------------+----------------------+
| con2_9,82       |                1e-08 |          -0.00088671 |
+-----------------+----------------------+----------------------+
| con2_10,81      |                4e-08 |          -4.045e-05  |
+-----------------+----------------------+----------------------+
| con2_11,37      |                1e-08 |          -3.886e-05  |
+-----------------+----------------------+----------------------+
| con2_12,49      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_13,76      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_14,45      |                0     |          -0.00010252 |
+-----------------+----------------------+----------------------+
| con2_15,57      |                2e-08 |          -0.00028108 |
+-----------------+----------------------+----------------------+
| con2_16,18      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_17,45      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_18,75      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_19,64      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_20,50      |                1e-08 |          -8.43e-06   |
+-----------------+----------------------+----------------------+
| con2_21,7       |                1e-08 |          -2e-08      |
+-----------------+----------------------+----------------------+
| con2_21,27      |                2e-08 |          -1e-08      |
+-----------------+----------------------+----------------------+
| con2_21,48      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_22,62      |                0     |          -3.38e-06   |
+-----------------+----------------------+----------------------+
| con2_23,34      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_24,3       |               -3e-08 |          -1e-08      |
+-----------------+----------------------+----------------------+
| con2_24,69      |                4e-08 |          -1.6e-07    |
+-----------------+----------------------+----------------------+
| con2_24,78      |                1e-08 |          -1e-08      |
+-----------------+----------------------+----------------------+
| con2_25,43      |                0     |          -0.00116686 |
+-----------------+----------------------+----------------------+
| con2_26,59      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_26,63      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_27,66      |                1e-08 |          -1e-08      |
+-----------------+----------------------+----------------------+
| con2_28,31      |                1e-08 |          -0.00135956 |
+-----------------+----------------------+----------------------+
| con2_29,11      |                2e-08 |          -0.00025984 |
+-----------------+----------------------+----------------------+
| con2_30,52      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_31,58      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_32,77      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_33,40      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_34,32      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_35,16      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_36,43      |                0     |          -0.00080268 |
+-----------------+----------------------+----------------------+
| con2_37,5       |                1e-08 |          -1.99e-05   |
+-----------------+----------------------+----------------------+
| con2_38,60      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_39,16      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_39,35      |                0     |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_40,13      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_41,35      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_41,60      |                1e-08 |          -5e-08      |
+-----------------+----------------------+----------------------+
| con2_42,32      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_42,77      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_43,14      |                0     |          -0.00015348 |
+-----------------+----------------------+----------------------+
| con2_44,26      |                1e-08 |          -3e-08      |
+-----------------+----------------------+----------------------+
| con2_45,55      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_46,21      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_47,55      |                0     |          -0.00039994 |
+-----------------+----------------------+----------------------+
| con2_48,66      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_49,31      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_50,22      |                1e-08 |          -4.1e-06    |
+-----------------+----------------------+----------------------+
| con2_51,41      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_51,76      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_52,39      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_52,56      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_53,25      |                0     |          -0.00802977 |
+-----------------+----------------------+----------------------+
| con2_54,64      |                1e-08 |          -3e-08      |
+-----------------+----------------------+----------------------+
| con2_55,62      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_56,30      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_56,41      |               -1e-08 |          -9e-08      |
+-----------------+----------------------+----------------------+
| con2_57,51      |               -3e-08 |          -2.8e-07    |
+-----------------+----------------------+----------------------+
| con2_57,72      |                2e-08 |          -7e-08      |
+-----------------+----------------------+----------------------+
| con2_58,4       |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_59,19      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_59,64      |               -1e-08 |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_60,16      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_61,50      |                1e-08 |          -0.00073477 |
+-----------------+----------------------+----------------------+
| con2_62,17      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_63,40      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_64,42      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_65,23      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_66,58      |                1e-08 |          -4e-08      |
+-----------------+----------------------+----------------------+
| con2_67,46      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_68,80      |                0     |          -5.4e-07    |
+-----------------+----------------------+----------------------+
| con2_69,54      |                3e-08 |          -3e-08      |
+-----------------+----------------------+----------------------+
| con2_70,12      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_71,68      |                2e-08 |          -2.17e-06   |
+-----------------+----------------------+----------------------+
| con2_72,51      |               -0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_72,56      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_73,57      |                3e-08 |          -5e-07      |
+-----------------+----------------------+----------------------+
| con2_74,67      |                1e-08 |          -5.17e-06   |
+-----------------+----------------------+----------------------+
| con2_75,17      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_76,38      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_77,33      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_78,26      |                3e-08 |          -3e-08      |
+-----------------+----------------------+----------------------+
| con2_78,44      |                1e-08 |          -3e-08      |
+-----------------+----------------------+----------------------+
| con2_79,69      |                8e-08 |          -1.4e-07    |
+-----------------+----------------------+----------------------+
| con2_80,67      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_81,3       |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_82,81      |                0     |          -0          |
+-----------------+----------------------+----------------------+
| con2_83,70      |                0     |          -0          |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 6.20147528693909e-07
Total relative constraint violation: 0.021846146762223146
*******************************************************************************

Final best objective: 6906331.940218305
Number of nlp problem solved: 46
Total number of iteration: 3
Solver_time: 46.98 seconds
Heuristic elapsed time: 47.73 seconds

