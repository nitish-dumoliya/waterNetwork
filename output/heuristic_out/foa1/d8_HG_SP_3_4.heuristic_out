Water Network: d8_HG_SP_3_4 

Testing bound_push=0.00099833276411114, bound_frac=0.009308231559030308
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00099833276411114
bound_frac: 0.009308231559030308
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00099833276411114
bound_frac = 0.009308231559030308
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961873.817312022
Testing bound_push=0.00022016699057409033, bound_frac=0.002239031328319654
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00022016699057409033
bound_frac: 0.002239031328319654
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00022016699057409033
bound_frac = 0.002239031328319654
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.695003317
Testing bound_push=0.00010035267217954114, bound_frac=0.0033268018685246076
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00010035267217954114
bound_frac: 0.0033268018685246076
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00010035267217954114
bound_frac = 0.0033268018685246076
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6984620.095103664
Testing bound_push=6.5265748573978e-05, bound_frac=0.00818184415277473
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 6.5265748573978e-05
bound_frac: 0.00818184415277473
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 6.5265748573978e-05
bound_frac = 0.00818184415277473
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961873.817313728
Testing bound_push=0.0007927514144702153, bound_frac=0.009164892227149455
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007927514144702153
bound_frac: 0.009164892227149455
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007927514144702153
bound_frac = 0.009164892227149455
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702689134
Testing bound_push=0.000980887150234918, bound_frac=0.01
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000980887150234918
bound_frac: 0.01
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000980887150234918
bound_frac = 0.01
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.725018998
Testing bound_push=0.000516806555044769, bound_frac=1e-06
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000516806555044769
bound_frac: 1e-06
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000516806555044769
bound_frac = 1e-06
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6973410.906948059
Testing bound_push=0.0005181327341602131, bound_frac=0.006424041587321213
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005181327341602131
bound_frac: 0.006424041587321213
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005181327341602131
bound_frac = 0.006424041587321213
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6978653.317336475
Testing bound_push=1e-06, bound_frac=0.01
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 1e-06
bound_frac: 0.01
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.01
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972533.81286021
Testing bound_push=0.0008829454821284923, bound_frac=0.008429171001649718
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008829454821284923
bound_frac: 0.008429171001649718
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008829454821284923
bound_frac = 0.008429171001649718
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6975441.902840099
Testing bound_push=0.0009804587309855083, bound_frac=0.01
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009804587309855083
bound_frac: 0.01
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009804587309855083
bound_frac = 0.01
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6963281.575230629
Testing bound_push=0.0008254881762771086, bound_frac=0.0022033075635848544
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008254881762771086
bound_frac: 0.0022033075635848544
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008254881762771086
bound_frac = 0.0022033075635848544
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 7003714.98844415
Testing bound_push=0.0008750128846747488, bound_frac=0.008437698300698702
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008750128846747488
bound_frac: 0.008437698300698702
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008750128846747488
bound_frac = 0.008437698300698702
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702765155
Testing bound_push=9.291720612818656e-05, bound_frac=0.01
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 9.291720612818656e-05
bound_frac: 0.01
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 9.291720612818656e-05
bound_frac = 0.01
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702535328
Testing bound_push=0.0009182461150072381, bound_frac=0.008382572553205288
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009182461150072381
bound_frac: 0.008382572553205288
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009182461150072381
bound_frac = 0.008382572553205288
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6982603.489016657
Testing bound_push=0.000994026594599696, bound_frac=0.009923580600035124
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000994026594599696
bound_frac: 0.009923580600035124
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000994026594599696
bound_frac = 0.009923580600035124
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.339358213
Testing bound_push=0.0008553736289229916, bound_frac=0.005150089996952515
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008553736289229916
bound_frac: 0.005150089996952515
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008553736289229916
bound_frac = 0.005150089996952515
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.5620112205
Testing bound_push=0.001, bound_frac=0.008474258876231891
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.001
bound_frac: 0.008474258876231891
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.001
bound_frac = 0.008474258876231891
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.70261174
Testing bound_push=0.0004696153626639109, bound_frac=0.00949246867661734
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004696153626639109
bound_frac: 0.00949246867661734
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004696153626639109
bound_frac = 0.00949246867661734
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970414.405981037
Testing bound_push=0.0008522411223424941, bound_frac=0.007188021882488164
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008522411223424941
bound_frac: 0.007188021882488164
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008522411223424941
bound_frac = 0.007188021882488164
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6966679.525435969
Testing bound_push=0.0009794347549045208, bound_frac=0.00911144318338424
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009794347549045208
bound_frac: 0.00911144318338424
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009794347549045208
bound_frac = 0.00911144318338424
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980048.871755859
Testing bound_push=0.000870316355245933, bound_frac=0.006623481213636346
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000870316355245933
bound_frac: 0.006623481213636346
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000870316355245933
bound_frac = 0.006623481213636346
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.7250267025
Testing bound_push=0.001, bound_frac=0.008247904573879396
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.001
bound_frac: 0.008247904573879396
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.001
bound_frac = 0.008247904573879396
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.70261174
Testing bound_push=0.0005640694317396284, bound_frac=0.008439062058231268
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005640694317396284
bound_frac: 0.008439062058231268
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005640694317396284
bound_frac = 0.008439062058231268
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970574.79789721
Testing bound_push=0.0008205711406915778, bound_frac=0.006304922385758588
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008205711406915778
bound_frac: 0.006304922385758588
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008205711406915778
bound_frac = 0.006304922385758588
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702019281
Testing bound_push=0.0009723094784876473, bound_frac=0.0087742971512412
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009723094784876473
bound_frac: 0.0087742971512412
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009723094784876473
bound_frac = 0.0087742971512412
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702762176
Testing bound_push=0.0008671333037124058, bound_frac=0.006724653104221406
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008671333037124058
bound_frac: 0.006724653104221406
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008671333037124058
bound_frac = 0.006724653104221406
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.580449574
Testing bound_push=0.000992029331981398, bound_frac=0.007484124296949873
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000992029331981398
bound_frac: 0.007484124296949873
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000992029331981398
bound_frac = 0.007484124296949873
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.704807526
Testing bound_push=0.0006716618184043469, bound_frac=0.006899835147651121
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006716618184043469
bound_frac: 0.006899835147651121
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006716618184043469
bound_frac = 0.006899835147651121
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.702735332
Testing bound_push=0.0008228230490010298, bound_frac=0.005731925647408003
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008228230490010298
bound_frac: 0.005731925647408003
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008228230490010298
bound_frac = 0.005731925647408003
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6978564.701745788
Stopping search: maximum iterations reached --> 5
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008553736289229916
bound_frac: 0.005150089996952515
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008553736289229916
bound_frac = 0.005150089996952515
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  6961709.5620112205
Solve_result:  solved
Solve_time: 3.049102000000005 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(44, 78)  True    69,61,710     75,37,834     1.29s       solved        No        121.54s
(38, 76)  True    69,61,710     83,67,358     0.74s       infeasible    No        122.36s
(78, 24)  True    69,61,710     92,85,866     1.82s       limit         No        124.24s
(2, 3)    True    69,61,710     1,06,43,439   2.1s        limit         No        126.41s
(41, 51)  True    69,61,710     82,89,290     1.42s       infeasible    No        127.89s
(27, 21)  True    69,61,710     75,76,661     1.23s       infeasible    No        129.17s
(58, 66)  True    69,61,710     73,06,522     1.14s       solved        No        130.39s
(60, 41)  True    69,61,710     69,97,184     0.5s        solved        No        130.95s
(19, 64)  True    69,61,710     95,54,189     2.15s       limit         No        133.15s
(30, 56)  True    69,61,710     79,33,246     1.76s       limit         No        134.96s
(77, 42)  True    69,61,710     86,14,064     1.18s       infeasible    No        136.22s
(42, 32)  True    69,61,710     81,29,452     1.59s       infeasible    No        137.91s
(45, 17)  True    69,61,710     59,56,162     0.49s       infeasible    No        138.44s
(35, 39)  True    69,61,710     69,12,397     0.55s       solved        Yes       139.1s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [35] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(39, 35)  True    69,12,397     68,87,983     0.67s       solved        Yes       139.86s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39, 35]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        

**********************************Final best results******************************************

Water Network: d8_HG_SP_3_4
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,62       |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_2,63       |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_3,2        |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_4,65       |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_4,66       |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_5,20       |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_6,36       |                   -0 |             5.6e-07  |
+-----------------+----------------------+----------------------+
| con2_7,48       |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_8,47       |                   -0 |             3.5e-07  |
+-----------------+----------------------+----------------------+
| con2_9,82       |                   -0 |             1e-07    |
+-----------------+----------------------+----------------------+
| con2_10,81      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_11,37      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_12,49      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_13,76      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_14,45      |                   -0 |             1e-08    |
+-----------------+----------------------+----------------------+
| con2_15,57      |                   -0 |             3e-08    |
+-----------------+----------------------+----------------------+
| con2_16,18      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_17,45      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_18,75      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_19,64      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_20,50      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_21,7       |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_21,27      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_21,48      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_22,62      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_23,34      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_24,3       |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_24,69      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_24,78      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_25,43      |                   -0 |             1.3e-07  |
+-----------------+----------------------+----------------------+
| con2_26,59      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_26,63      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_27,66      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_28,31      |                   -0 |             1.5e-07  |
+-----------------+----------------------+----------------------+
| con2_29,11      |                   -0 |             3e-08    |
+-----------------+----------------------+----------------------+
| con2_30,52      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_31,58      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_32,77      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_33,40      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_34,32      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_35,16      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_36,43      |                   -0 |             9e-08    |
+-----------------+----------------------+----------------------+
| con2_37,5       |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_38,60      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_39,16      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_39,35      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_40,13      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_41,35      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_41,60      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_42,32      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_42,77      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_43,14      |                   -0 |             2e-08    |
+-----------------+----------------------+----------------------+
| con2_44,26      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_45,55      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_46,21      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_47,55      |                   -0 |             4e-08    |
+-----------------+----------------------+----------------------+
| con2_48,66      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_49,31      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_50,22      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_51,41      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_51,76      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_52,39      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_52,56      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_53,25      |                   -0 |             1.05e-06 |
+-----------------+----------------------+----------------------+
| con2_54,64      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_55,62      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_56,30      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_56,41      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_57,51      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_57,72      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_58,4       |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_59,19      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_59,64      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_60,16      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_61,50      |                   -0 |             8e-08    |
+-----------------+----------------------+----------------------+
| con2_62,17      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_63,40      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_64,42      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_65,23      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_66,58      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_67,46      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_68,80      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_69,54      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_70,12      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_71,68      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_72,51      |                    0 |             0        |
+-----------------+----------------------+----------------------+
| con2_72,56      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_73,57      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_74,67      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_75,17      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_76,38      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_77,33      |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_78,26      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_78,44      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_79,69      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_80,67      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_81,3       |                    0 |            -0        |
+-----------------+----------------------+----------------------+
| con2_82,81      |                   -0 |             0        |
+-----------------+----------------------+----------------------+
| con2_83,70      |                   -0 |             0        |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 6.39972540210074e-11
Total relative constraint violation: 2.6362430332570055e-06
*******************************************************************************

Final best objective: 6887983.329780776
Number of nlp problem solved: 46
Total number of iteration: 3
Solver_time: 137.73 seconds
Heuristic elapsed time: 139.89 seconds

