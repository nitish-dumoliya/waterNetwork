Water Network: d11_HG_SP_6_3 

Testing bound_push=0.004503758573486668, bound_frac=0.00787870926495306
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.004503758573486668
bound_frac: 0.00787870926495306
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004503758573486668
bound_frac = 0.00787870926495306
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11007929.766770195
Testing bound_push=0.0007621541992860231, bound_frac=0.07318222576819258
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0007621541992860231
bound_frac: 0.07318222576819258
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007621541992860231
bound_frac = 0.07318222576819258
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10930711.594280006
Testing bound_push=0.0065705319599048935, bound_frac=0.0361697708228738
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0065705319599048935
bound_frac: 0.0361697708228738
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0065705319599048935
bound_frac = 0.0361697708228738
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11017322.663268689
Testing bound_push=0.0059228962972558636, bound_frac=0.012046565443843135
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0059228962972558636
bound_frac: 0.012046565443843135
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0059228962972558636
bound_frac = 0.012046565443843135
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10968736.577050183
Testing bound_push=0.008628881522623573, bound_frac=0.025350073639374002
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.008628881522623573
bound_frac: 0.025350073639374002
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008628881522623573
bound_frac = 0.025350073639374002
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10948049.86218124
Testing bound_push=1e-06, bound_frac=0.04451406236774899
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 1e-06
bound_frac: 0.04451406236774899
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 1e-06
bound_frac = 0.04451406236774899
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11642886.617805125
Testing bound_push=0.00018081167883394035, bound_frac=0.1
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.00018081167883394035
bound_frac: 0.1
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00018081167883394035
bound_frac = 0.1
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10929762.294692695
Testing bound_push=0.008102440450604424, bound_frac=0.04141014760825686
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.008102440450604424
bound_frac: 0.04141014760825686
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008102440450604424
bound_frac = 0.04141014760825686
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10806439.851181185
Testing bound_push=0.008318262009783627, bound_frac=1e-06
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.008318262009783627
bound_frac: 1e-06
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008318262009783627
bound_frac = 1e-06
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11668719.45567079
Testing bound_push=0.0038568985815571454, bound_frac=1e-06
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0038568985815571454
bound_frac: 1e-06
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0038568985815571454
bound_frac = 1e-06
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11700824.082926646
Testing bound_push=0.0006122513981294311, bound_frac=0.05632974198184937
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0006122513981294311
bound_frac: 0.05632974198184937
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006122513981294311
bound_frac = 0.05632974198184937
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10761943.677663755
Testing bound_push=6.55860260476239e-05, bound_frac=0.1
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 6.55860260476239e-05
bound_frac: 0.1
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 6.55860260476239e-05
bound_frac = 0.1
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11642886.617804708
Testing bound_push=0.007324260226956935, bound_frac=0.04829950191980252
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.007324260226956935
bound_frac: 0.04829950191980252
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007324260226956935
bound_frac = 0.04829950191980252
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10952491.073191429
Testing bound_push=0.008589950047323856, bound_frac=0.014047910176645384
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.008589950047323856
bound_frac: 0.014047910176645384
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008589950047323856
bound_frac = 0.014047910176645384
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11009147.090599112
Testing bound_push=0.002933803259606387, bound_frac=1e-06
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.002933803259606387
bound_frac: 1e-06
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.002933803259606387
bound_frac = 1e-06
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11213837.96613742
Testing bound_push=0.0009178770971941466, bound_frac=0.06223758178889956
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0009178770971941466
bound_frac: 0.06223758178889956
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009178770971941466
bound_frac = 0.06223758178889956
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10964276.893586166
Testing bound_push=0.0002797008254205269, bound_frac=0.09774610015919556
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0002797008254205269
bound_frac: 0.09774610015919556
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0002797008254205269
bound_frac = 0.09774610015919556
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11642886.61780479
Testing bound_push=0.004901856247885689, bound_frac=0.04877348019916196
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.004901856247885689
bound_frac: 0.04877348019916196
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004901856247885689
bound_frac = 0.04877348019916196
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10962659.442176603
Testing bound_push=0.007389078516618809, bound_frac=0.03926275659581906
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.007389078516618809
bound_frac: 0.03926275659581906
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007389078516618809
bound_frac = 0.03926275659581906
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10938441.672675924
Testing bound_push=0.003224664488784894, bound_frac=0.01686105784422033
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.003224664488784894
bound_frac: 0.01686105784422033
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.003224664488784894
bound_frac = 0.01686105784422033
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10959977.507402435
Testing bound_push=0.0009331605921659876, bound_frac=0.06397783840391282
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0009331605921659876
bound_frac: 0.06397783840391282
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009331605921659876
bound_frac = 0.06397783840391282
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11679016.945078166
Testing bound_push=0.0005081348411554686, bound_frac=0.09475474775870223
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0005081348411554686
bound_frac: 0.09475474775870223
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005081348411554686
bound_frac = 0.09475474775870223
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11793243.592902351
Testing bound_push=0.0021891780893777634, bound_frac=0.04874491539039755
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0021891780893777634
bound_frac: 0.04874491539039755
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0021891780893777634
bound_frac = 0.04874491539039755
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10800123.763378754
Testing bound_push=0.004733938029864441, bound_frac=0.054390144194496906
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.004733938029864441
bound_frac: 0.054390144194496906
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004733938029864441
bound_frac = 0.054390144194496906
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10789732.973837264
Testing bound_push=0.004046675795807786, bound_frac=0.04662971473069494
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.004046675795807786
bound_frac: 0.04662971473069494
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004046675795807786
bound_frac = 0.04662971473069494
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10818059.770446246
Testing bound_push=0.0008702184156687921, bound_frac=0.059866550497921805
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0008702184156687921
bound_frac: 0.059866550497921805
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008702184156687921
bound_frac = 0.059866550497921805
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10940421.642406011
Testing bound_push=0.0005415189421797959, bound_frac=0.0853484621130095
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0005415189421797959
bound_frac: 0.0853484621130095
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005415189421797959
bound_frac = 0.0853484621130095
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11684673.739238119
Testing bound_push=0.0007663297480022921, bound_frac=0.04898899624443972
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0007663297480022921
bound_frac: 0.04898899624443972
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007663297480022921
bound_frac = 0.04898899624443972
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11793243.592902353
Testing bound_push=0.0015475999104574015, bound_frac=0.062359719080769815
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0015475999104574015
bound_frac: 0.062359719080769815
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0015475999104574015
bound_frac = 0.062359719080769815
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11684673.739239791
Testing bound_push=0.003468291218989097, bound_frac=0.061783038843482956
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.003468291218989097
bound_frac: 0.061783038843482956
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.003468291218989097
bound_frac = 0.061783038843482956
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10946133.639621524
Testing bound_push=0.000752986809209688, bound_frac=0.056262123167710766
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.000752986809209688
bound_frac: 0.056262123167710766
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000752986809209688
bound_frac = 0.056262123167710766
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10934063.441503448
Testing bound_push=0.0005057939800801142, bound_frac=0.08085201472590227
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0005057939800801142
bound_frac: 0.08085201472590227
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005057939800801142
bound_frac = 0.08085201472590227
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11648844.691064822
Testing bound_push=0.00040031301922857616, bound_frac=0.051481559439159996
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.00040031301922857616
bound_frac: 0.051481559439159996
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00040031301922857616
bound_frac = 0.051481559439159996
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11710708.503398007
Testing bound_push=0.00012119839171233714, bound_frac=0.06492898435247123
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.00012119839171233714
bound_frac: 0.06492898435247123
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00012119839171233714
bound_frac = 0.06492898435247123
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11642886.617804809
Testing bound_push=0.002363924456031878, bound_frac=0.0633327675621642
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.002363924456031878
bound_frac: 0.0633327675621642
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.002363924456031878
bound_frac = 0.0633327675621642
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10980555.246938527
Testing bound_push=0.0006689703825732218, bound_frac=0.05449189872413131
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0006689703825732218
bound_frac: 0.05449189872413131
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006689703825732218
bound_frac = 0.05449189872413131
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10924516.67816183
Testing bound_push=0.0004510947089207493, bound_frac=0.07508545567401871
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0004510947089207493
bound_frac: 0.07508545567401871
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004510947089207493
bound_frac = 0.07508545567401871
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11340160.952608418
Testing bound_push=0.0006862416925223866, bound_frac=0.05193082779198226
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0006862416925223866
bound_frac: 0.05193082779198226
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006862416925223866
bound_frac = 0.05193082779198226
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10775249.156855233
Testing bound_push=0.0015508069840103665, bound_frac=0.059500751616050694
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0015508069840103665
bound_frac: 0.059500751616050694
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0015508069840103665
bound_frac = 0.059500751616050694
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11797065.61249172
Testing bound_push=0.0018514628321706782, bound_frac=0.061004540716400976
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0018514628321706782
bound_frac: 0.061004540716400976
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0018514628321706782
bound_frac = 0.061004540716400976
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11684666.3260395
Testing bound_push=0.0006056695905548286, bound_frac=0.05498123915378691
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0006056695905548286
bound_frac: 0.05498123915378691
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006056695905548286
bound_frac = 0.05498123915378691
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10953125.811304474
Testing bound_push=0.0004419083735651125, bound_frac=0.06960310867313539
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0004419083735651125
bound_frac: 0.06960310867313539
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004419083735651125
bound_frac = 0.06960310867313539
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11835226.03006025
Testing bound_push=0.0008154027647367366, bound_frac=0.053725703672387076
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0008154027647367366
bound_frac: 0.053725703672387076
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008154027647367366
bound_frac = 0.053725703672387076
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11642886.617824087
Testing bound_push=0.0029594802326669174, bound_frac=0.05307941598709079
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0029594802326669174
bound_frac: 0.05307941598709079
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0029594802326669174
bound_frac = 0.05307941598709079
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10933759.37155156
Testing bound_push=0.002187239320888928, bound_frac=0.055238401468153266
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.002187239320888928
bound_frac: 0.055238401468153266
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.002187239320888928
bound_frac = 0.055238401468153266
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10964654.256495181
Testing bound_push=0.0005770676702295016, bound_frac=0.056382036383015345
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0005770676702295016
bound_frac: 0.056382036383015345
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005770676702295016
bound_frac = 0.056382036383015345
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11679014.803432098
Testing bound_push=0.00041075235985641833, bound_frac=0.07499481641402653
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.00041075235985641833
bound_frac: 0.07499481641402653
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00041075235985641833
bound_frac = 0.07499481641402653
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 11710708.503396641
Testing bound_push=0.0008101327129489161, bound_frac=0.055038138805311526
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0008101327129489161
bound_frac: 0.055038138805311526
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008101327129489161
bound_frac = 0.055038138805311526
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10755551.891302167
Testing bound_push=0.002939894146152808, bound_frac=0.05029774062661579
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.002939894146152808
bound_frac: 0.05029774062661579
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.002939894146152808
bound_frac = 0.05029774062661579
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10952491.073478602
Testing bound_push=0.0021593103101210263, bound_frac=0.04816906571922437
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0021593103101210263
bound_frac: 0.04816906571922437
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0021593103101210263
bound_frac = 0.04816906571922437
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10748418.926075943
Testing bound_push=0.0008303903664854768, bound_frac=0.055567681212938286
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0008303903664854768
bound_frac: 0.055567681212938286
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008303903664854768
bound_frac = 0.055567681212938286
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10776006.691953514
Testing bound_push=0.0010820679364101711, bound_frac=0.07998950522391063
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0010820679364101711
bound_frac: 0.07998950522391063
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0010820679364101711
bound_frac = 0.07998950522391063
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10933759.37155157
Testing bound_push=0.0008550402534011928, bound_frac=0.05555770744095703
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0008550402534011928
bound_frac: 0.05555770744095703
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008550402534011928
bound_frac = 0.05555770744095703
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10960043.547120133
Testing bound_push=0.0033223918449383875, bound_frac=0.04894236833159704
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0033223918449383875
bound_frac: 0.04894236833159704
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0033223918449383875
bound_frac = 0.04894236833159704
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10946134.265649544
Testing bound_push=0.0021453458047370755, bound_frac=0.04463439784475993
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0021453458047370755
bound_frac: 0.04463439784475993
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0021453458047370755
bound_frac = 0.04463439784475993
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 10933759.37151572
Stopping search: maximum iterations reached --> 10
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(54, 92), (53, 35), (139, 114), (17, 152), (109, 61), (146, 86), (24, 26), (31, 83), (135, 134), (134, 142), (161, 162), (23, 94), (29, 43), (162, 139), (156, 138), (71, 73), (50, 44), (98, 29), (157, 161), (51, 42), (38, 30), (152, 24), (155, 75), (64, 155), (28, 135), (137, 51), (163, 12), (130, 82), (42, 146), (44, 79), (95, 121)}
super_source_out_arc: [(1, 25), (1, 39), (1, 153)] 

bound_push: 0.0021593103101210263
bound_frac: 0.04816906571922437
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0021593103101210263
bound_frac = 0.04816906571922437
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  10748418.926075943
Solve_result:  solved
Solve_time: 5.605688999999984 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [165, 166, 136, 140, 141, 70, 115, 114, 87, 85, 37, 124, 30, 131, 35, 65, 32, 72, 2, 93, 19, 113, 55, 100, 45, 14, 60, 88, 6] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(27, 165) True    1,07,48,419   1,30,02,992   1.86s       limit         No        276.43s
(136, 166)True    1,07,48,419   1,48,05,316   1.82s       limit         No        278.41s
(140, 136)True    1,07,48,419   1,49,61,321   1.77s       limit         No        280.33s
(141, 140)True    1,07,48,419   1,11,51,853   0.68s       solved        No        281.18s
(8, 141)  True    1,07,48,419   1,08,77,906   0.8s        solved        No        282.13s
(69, 70)  True    1,07,48,419   1,13,87,438   1.67s       limit         No        283.96s
(128, 115)True    1,07,48,419   1,34,70,466   1.72s       limit         No        285.83s
(119, 114)True    1,07,48,419   1,40,70,369   1.16s       limit         No        287.15s
(22, 87)  True    1,07,48,419   1,22,01,726   0.97s       limit         No        288.28s
(107, 85) True    1,07,48,419   1,18,60,368   1.07s       limit         No        289.5s
(147, 37) True    1,07,48,419   1,07,62,916   0.34s       solved        No        290.0s
(47, 124) True    1,07,48,419   1,47,29,576   1.8s        limit         No        291.96s
(105, 30) True    1,07,48,419   1,08,21,170   1.43s       solved        No        293.56s
(56, 131) True    1,07,48,419   1,12,41,190   1.61s       limit         No        295.34s
(48, 35)  True    1,07,48,419   1,45,22,912   1.81s       limit         No        297.31s
(75, 65)  True    1,07,48,419   1,15,03,373   1.85s       limit         No        299.33s
(111, 32) True    1,07,48,419   1,14,58,712   1.87s       limit         No        301.37s
(129, 72) True    1,07,48,419   1,32,67,534   1.86s       limit         No        303.4s
(18, 2)   True    1,07,48,419   1,12,95,572   1.67s       limit         No        305.23s
(74, 93)  True    1,07,48,419   1,07,40,167   0.42s       solved        Yes       305.82s

visited_nodes: [165, 166, 136, 140, 141, 70, 115, 114, 87, 85, 37, 124, 30, 131, 35, 65, 32, 72, 2, 93]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [19, 74, 113, 55, 100, 45, 14, 60, 88, 6] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(68, 19)  True    1,07,40,167   1,08,44,546   0.69s       solved        No        306.76s
(93, 74)  True    1,07,40,167   1,07,93,762   0.6s        solved        No        307.53s
(100, 113)True    1,07,40,167   1,41,85,335   1.89s       limit         No        309.59s
(76, 55)  True    1,07,40,167   1,07,37,922   1.47s       limit         No        311.23s
(144, 100)True    1,07,40,167   1,11,90,454   1.7s        solved        No        313.1s
(6, 45)   True    1,07,40,167   1,07,91,696   1.44s       solved        No        314.71s
(62, 14)  True    1,07,40,167   1,39,27,172   1.76s       limit         No        316.64s
(116, 60) True    1,07,40,167   1,07,37,096   0.41s       solved        Yes       317.22s

visited_nodes: [165, 166, 136, 140, 141, 70, 115, 114, 87, 85, 37, 124, 30, 131, 35, 65, 32, 72, 2, 93, 19, 74, 113, 55, 100, 45, 14, 60]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [122, 116, 88, 6] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(14, 122) True    1,07,37,096   1,07,37,254   0.91s       solved        No        318.38s
(26, 116) True    1,07,37,096   1,07,68,328   0.86s       solved        No        319.4s
(84, 88)  True    1,07,37,096   1,29,50,342   1.93s       limit         No        321.51s
(79, 6)   True    1,07,37,096   1,08,01,718   0.74s       solved        No        322.42s

**********************************Final best results******************************************

Water Network: d11_HG_SP_6_3
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,25       |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_2,18       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_3,111      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_4,43       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_5,89       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_6,101      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_7,39       |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_8,85       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_9,92       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_10,126     |                   -0 |            4e-08     |
+-----------------+----------------------+----------------------+
| con2_11,59      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_12,125     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_13,66      |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_14,149     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_15,103     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_16,96      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_17,152     |                   -0 |            1.9e-07   |
+-----------------+----------------------+----------------------+
| con2_18,96      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_19,68      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_20,115     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_21,121     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_22,2       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_23,94      |                   -0 |            2.1e-07   |
+-----------------+----------------------+----------------------+
| con2_24,26      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_25,65      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_26,116     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_27,159     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_27,165     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_28,135     |                   -0 |            3e-08     |
+-----------------+----------------------+----------------------+
| con2_29,43      |                   -0 |            2e-08     |
+-----------------+----------------------+----------------------+
| con2_30,77      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_30,105     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_31,83      |                   -0 |            6e-08     |
+-----------------+----------------------+----------------------+
| con2_32,3       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_32,41      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_33,114     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_34,11      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_35,48      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_36,154     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_37,7       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_37,147     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_38,30      |                   -0 |            2.02e-06  |
+-----------------+----------------------+----------------------+
| con2_39,1       |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_40,62      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_41,19      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_42,146     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_43,158     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_44,79      |                   -0 |            3.5e-07   |
+-----------------+----------------------+----------------------+
| con2_45,6       |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_45,101     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_46,133     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_47,93      |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_48,117     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_49,25      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_50,44      |                   -0 |            3.59e-06  |
+-----------------+----------------------+----------------------+
| con2_51,42      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_52,118     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_53,35      |                   -0 |            1.2e-07   |
+-----------------+----------------------+----------------------+
| con2_54,92      |                   -0 |            8.1e-07   |
+-----------------+----------------------+----------------------+
| con2_55,10      |                   -0 |            3.3e-07   |
+-----------------+----------------------+----------------------+
| con2_56,112     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_57,16      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_58,91      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_59,40      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_60,97      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_60,100     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_61,34      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_61,153     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_62,14      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_63,33      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_63,120     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_64,155     |                   -0 |            1e-07     |
+-----------------+----------------------+----------------------+
| con2_65,49      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_65,75      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_66,132     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_67,13      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_68,30      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_69,70      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_69,131     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_70,73      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_71,73      |                   -0 |            4.7e-07   |
+-----------------+----------------------+----------------------+
| con2_72,7       |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_73,131     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_74,72      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_74,93      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_75,49      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_76,55      |                    0 |            9e-08     |
+-----------------+----------------------+----------------------+
| con2_76,108     |                   -0 |            2e-08     |
+-----------------+----------------------+----------------------+
| con2_77,35      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_78,99      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_78,141     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_79,6       |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_80,106     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_81,15      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_82,83      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_82,115     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_83,123     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_84,88      |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_85,87      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_86,3       |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_87,22      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_87,36      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_88,145     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_89,67      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_90,88      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_91,74      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_92,113     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_93,72      |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_94,15      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_94,150     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_95,121     |                   -0 |            1e-07     |
+-----------------+----------------------+----------------------+
| con2_96,2       |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_96,122     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_97,81      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_97,145     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_98,29      |                   -0 |            1.2e-07   |
+-----------------+----------------------+----------------------+
| con2_99,36      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_100,144    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_101,110    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_102,65     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_103,45     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_103,52     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_104,127    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_105,77     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_106,20     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_107,37     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_107,85     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_108,116    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_109,61     |                   -0 |            7.1e-07   |
+-----------------+----------------------+----------------------+
| con2_110,5      |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_111,32     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_112,4      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_113,100    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_113,101    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_114,119    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_115,83     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_115,128    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_116,60     |                   -0 |           -6.957e-05 |
+-----------------+----------------------+----------------------+
| con2_117,35     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_117,92     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_118,79     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_119,77     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_120,19     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_121,104    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_122,11     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_122,14     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_123,21     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_124,47     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_124,82     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_125,124    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_126,108    |                   -0 |            3e-08     |
+-----------------+----------------------+----------------------+
| con2_127,9      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_128,46     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_129,7      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_129,72     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_130,82     |                   -0 |            2.5e-07   |
+-----------------+----------------------+----------------------+
| con2_131,56     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_131,112    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_132,102    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_133,21     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_134,142    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_135,134    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_136,8      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_136,140    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_137,51     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_138,160    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_139,114    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_140,8      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_140,141    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_141,8      |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_142,70     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_142,86     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_143,78     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_143,141    |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_144,45     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_145,26     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_146,86     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_147,58     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_148,27     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_148,166    |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_149,103    |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_150,84     |                    0 |            0         |
+-----------------+----------------------+----------------------+
| con2_151,80     |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_152,24     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_153,1      |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_154,57     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_155,75     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_156,138    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_157,161    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_158,90     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_159,12     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_160,151    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_161,162    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_162,139    |                    0 |           -0         |
+-----------------+----------------------+----------------------+
| con2_163,12     |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_164,138    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_165,164    |                   -0 |            0         |
+-----------------+----------------------+----------------------+
| con2_166,136    |                   -0 |            0         |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 1.0244676802079669e-10
Total relative constraint violation: 7.925477801894576e-05
*******************************************************************************

Final best objective: 10737096.296967616
Number of nlp problem solved: 88
Total number of iteration: 3
Solver_time: 314.45 seconds
Heuristic elapsed time: 322.45 seconds

