Water Network: d9_HG_SP_4_2 

Testing bound_push=0.004002144928233824, bound_frac=0.06214940195910262
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.004002144928233824
bound_frac: 0.06214940195910262
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004002144928233824
bound_frac = 0.06214940195910262
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8984549.945625262
Testing bound_push=0.009970964523558347, bound_frac=0.04193756067605527
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009970964523558347
bound_frac: 0.04193756067605527
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009970964523558347
bound_frac = 0.04193756067605527
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8993930.718711607
Testing bound_push=0.008619432121175915, bound_frac=0.07013019223602683
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008619432121175915
bound_frac: 0.07013019223602683
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008619432121175915
bound_frac = 0.07013019223602683
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8973718.775620865
Testing bound_push=0.0027813503743231134, bound_frac=0.052252295488302423
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0027813503743231134
bound_frac: 0.052252295488302423
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0027813503743231134
bound_frac = 0.052252295488302423
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9072277.449622776
Testing bound_push=0.0017851014357496155, bound_frac=0.05047755660962564
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0017851014357496155
bound_frac: 0.05047755660962564
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0017851014357496155
bound_frac = 0.05047755660962564
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9001714.321971532
Testing bound_push=0.005048343012040473, bound_frac=0.06667717315013527
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.005048343012040473
bound_frac: 0.06667717315013527
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.005048343012040473
bound_frac = 0.06667717315013527
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8977761.894118892
Testing bound_push=0.006224598930525165, bound_frac=0.05798030375683763
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.006224598930525165
bound_frac: 0.05798030375683763
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.006224598930525165
bound_frac = 0.05798030375683763
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9019027.425191415
Testing bound_push=0.01, bound_frac=0.1
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.01
bound_frac: 0.1
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.01
bound_frac = 0.1
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9042633.416700322
Testing bound_push=0.002680912354472428, bound_frac=0.09431389324614133
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.002680912354472428
bound_frac: 0.09431389324614133
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.002680912354472428
bound_frac = 0.09431389324614133
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9054097.4712081
Testing bound_push=0.004349152141538082, bound_frac=0.07858447532219215
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.004349152141538082
bound_frac: 0.07858447532219215
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004349152141538082
bound_frac = 0.07858447532219215
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9081518.012270283
Testing bound_push=0.00734913404459875, bound_frac=0.06957772108270742
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00734913404459875
bound_frac: 0.06957772108270742
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00734913404459875
bound_frac = 0.06957772108270742
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8976756.026604986
Testing bound_push=0.0049345347464195, bound_frac=0.06741767398019022
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0049345347464195
bound_frac: 0.06741767398019022
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0049345347464195
bound_frac = 0.06741767398019022
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8987835.068543622
Testing bound_push=0.01, bound_frac=0.1
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.01
bound_frac: 0.1
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.01
bound_frac = 0.1
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9042633.416700322
Testing bound_push=0.005077877922841791, bound_frac=0.1
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.005077877922841791
bound_frac: 0.1
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.005077877922841791
bound_frac = 0.1
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8987849.028003449
Testing bound_push=0.005792755653268899, bound_frac=0.08586192224031164
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.005792755653268899
bound_frac: 0.08586192224031164
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.005792755653268899
bound_frac = 0.08586192224031164
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8983960.780503744
Testing bound_push=0.008511478686651213, bound_frac=0.07103860779264706
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008511478686651213
bound_frac: 0.07103860779264706
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008511478686651213
bound_frac = 0.07103860779264706
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8975745.310638687
Testing bound_push=0.004960855953550253, bound_frac=0.07216770282015982
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.004960855953550253
bound_frac: 0.07216770282015982
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.004960855953550253
bound_frac = 0.07216770282015982
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8989312.847284973
Testing bound_push=0.0097741618274491, bound_frac=0.08812773802739642
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0097741618274491
bound_frac: 0.08812773802739642
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0097741618274491
bound_frac = 0.08812773802739642
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9035293.90347398
Testing bound_push=0.008046093665474681, bound_frac=0.09638955497023055
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008046093665474681
bound_frac: 0.09638955497023055
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008046093665474681
bound_frac = 0.09638955497023055
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9044787.647031302
Testing bound_push=0.007088728755719088, bound_frac=0.08440588251509151
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007088728755719088
bound_frac: 0.08440588251509151
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007088728755719088
bound_frac = 0.08440588251509151
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9106420.037420612
Testing bound_push=0.00912829724038035, bound_frac=0.07149547816000054
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00912829724038035
bound_frac: 0.07149547816000054
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00912829724038035
bound_frac = 0.07149547816000054
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9079027.081580287
Testing bound_push=0.0063829190328838145, bound_frac=0.07261756529158742
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0063829190328838145
bound_frac: 0.07261756529158742
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0063829190328838145
bound_frac = 0.07261756529158742
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9075671.835735347
Testing bound_push=0.009165783841975656, bound_frac=0.07143748088357
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009165783841975656
bound_frac: 0.07143748088357
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009165783841975656
bound_frac = 0.07143748088357
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8942891.058266358
Testing bound_push=0.008555032893472375, bound_frac=0.0887542125693443
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008555032893472375
bound_frac: 0.0887542125693443
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008555032893472375
bound_frac = 0.0887542125693443
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8970049.257275466
Testing bound_push=0.00819695622288775, bound_frac=0.0838928251748553
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00819695622288775
bound_frac: 0.0838928251748553
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00819695622288775
bound_frac = 0.0838928251748553
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8996875.100148074
Testing bound_push=0.009244045165901032, bound_frac=0.07148636961062688
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009244045165901032
bound_frac: 0.07148636961062688
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009244045165901032
bound_frac = 0.07148636961062688
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8942922.626435932
Testing bound_push=0.00730020087995548, bound_frac=0.07045068579423316
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00730020087995548
bound_frac: 0.07045068579423316
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00730020087995548
bound_frac = 0.07045068579423316
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9054629.230729716
Testing bound_push=0.008861594849238935, bound_frac=0.0630923523116568
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008861594849238935
bound_frac: 0.0630923523116568
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008861594849238935
bound_frac = 0.0630923523116568
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9055757.022494689
Testing bound_push=0.009112810427738404, bound_frac=0.08305003338493391
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009112810427738404
bound_frac: 0.08305003338493391
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009112810427738404
bound_frac = 0.08305003338493391
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9028767.710850606
Testing bound_push=0.008140496839059794, bound_frac=0.08383556464741178
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008140496839059794
bound_frac: 0.08383556464741178
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008140496839059794
bound_frac = 0.08383556464741178
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9061899.752405012
Testing bound_push=0.009271464796989135, bound_frac=0.07147666667883965
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009271464796989135
bound_frac: 0.07147666667883965
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009271464796989135
bound_frac = 0.07147666667883965
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8937673.177652385
Testing bound_push=0.007416496530623572, bound_frac=0.06862138837830509
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007416496530623572
bound_frac: 0.06862138837830509
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007416496530623572
bound_frac = 0.06862138837830509
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9041233.313471744
Testing bound_push=0.008784678050500726, bound_frac=0.06479786138597364
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008784678050500726
bound_frac: 0.06479786138597364
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008784678050500726
bound_frac = 0.06479786138597364
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9056609.77180962
Testing bound_push=0.009241138072571578, bound_frac=0.08018164865700761
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009241138072571578
bound_frac: 0.08018164865700761
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009241138072571578
bound_frac = 0.08018164865700761
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8937070.600462947
Testing bound_push=0.00739205772449276, bound_frac=0.0842730891048657
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00739205772449276
bound_frac: 0.0842730891048657
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00739205772449276
bound_frac = 0.0842730891048657
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8993930.718708524
Testing bound_push=0.00927641265405876, bound_frac=0.0744345957673847
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00927641265405876
bound_frac: 0.0744345957673847
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00927641265405876
bound_frac = 0.0744345957673847
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8942891.062219305
Testing bound_push=0.0073483391941988226, bound_frac=0.07267093195537498
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0073483391941988226
bound_frac: 0.07267093195537498
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0073483391941988226
bound_frac = 0.07267093195537498
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9014647.006973218
Testing bound_push=0.008801960152161434, bound_frac=0.07321655271971089
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008801960152161434
bound_frac: 0.07321655271971089
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008801960152161434
bound_frac = 0.07321655271971089
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8946843.491708077
Testing bound_push=0.009305301894988165, bound_frac=0.07874745629304446
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009305301894988165
bound_frac: 0.07874745629304446
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009305301894988165
bound_frac = 0.07874745629304446
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8994264.23321122
Testing bound_push=0.007781281788377479, bound_frac=0.0850040772788627
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007781281788377479
bound_frac: 0.0850040772788627
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007781281788377479
bound_frac = 0.0850040772788627
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9042633.416696435
Testing bound_push=0.00927306840423917, bound_frac=0.07622793218476423
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00927306840423917
bound_frac: 0.07622793218476423
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00927306840423917
bound_frac = 0.07622793218476423
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8946670.18860406
Testing bound_push=0.007105007466211244, bound_frac=0.07413712476196886
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007105007466211244
bound_frac: 0.07413712476196886
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007105007466211244
bound_frac = 0.07413712476196886
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9056892.811428433
Testing bound_push=0.009028103385898186, bound_frac=0.07905695037434114
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009028103385898186
bound_frac: 0.07905695037434114
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009028103385898186
bound_frac = 0.07905695037434114
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8974999.939372595
Testing bound_push=0.009290940948264126, bound_frac=0.07825880647643925
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009290940948264126
bound_frac: 0.07825880647643925
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009290940948264126
bound_frac = 0.07825880647643925
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8946843.49172167
Testing bound_push=0.0074011006020889974, bound_frac=0.08506115791848529
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.0074011006020889974
bound_frac: 0.08506115791848529
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0074011006020889974
bound_frac = 0.08506115791848529
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9041690.305940883
Testing bound_push=0.009269157241696314, bound_frac=0.07579147987605575
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009269157241696314
bound_frac: 0.07579147987605575
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009269157241696314
bound_frac = 0.07579147987605575
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8942429.428915987
Testing bound_push=0.00785097098395545, bound_frac=0.07394186846727224
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.00785097098395545
bound_frac: 0.07394186846727224
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00785097098395545
bound_frac = 0.07394186846727224
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8983707.515101483
Testing bound_push=0.009189300879355721, bound_frac=0.07844531795942247
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009189300879355721
bound_frac: 0.07844531795942247
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009189300879355721
bound_frac = 0.07844531795942247
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8946843.4917205
Testing bound_push=0.009249462123095752, bound_frac=0.07843521795217415
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009249462123095752
bound_frac: 0.07843521795217415
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009249462123095752
bound_frac = 0.07843521795217415
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8970227.884251848
Testing bound_push=0.007541815243936068, bound_frac=0.08462692709328648
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007541815243936068
bound_frac: 0.08462692709328648
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007541815243936068
bound_frac = 0.08462692709328648
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8989493.309392827
Testing bound_push=0.009256468865257262, bound_frac=0.07491011706479284
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009256468865257262
bound_frac: 0.07491011706479284
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009256468865257262
bound_frac = 0.07491011706479284
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8994264.2329581
Testing bound_push=0.008225705730267482, bound_frac=0.07546984812044494
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.008225705730267482
bound_frac: 0.07546984812044494
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.008225705730267482
bound_frac = 0.07546984812044494
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9020695.035759756
Testing bound_push=0.009268160265696056, bound_frac=0.07826945465946646
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009268160265696056
bound_frac: 0.07826945465946646
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009268160265696056
bound_frac = 0.07826945465946646
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8998321.69626712
Testing bound_push=0.009225380597487691, bound_frac=0.07971711763908859
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009225380597487691
bound_frac: 0.07971711763908859
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009225380597487691
bound_frac = 0.07971711763908859
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9042784.25435924
Testing bound_push=0.007975107750925093, bound_frac=0.08437048003537866
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.007975107750925093
bound_frac: 0.08437048003537866
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.007975107750925093
bound_frac = 0.08437048003537866
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9051522.889828475
Stopping search: maximum iterations reached --> 10
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

bound_push: 0.009241138072571578
bound_frac: 0.08018164865700761
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.009241138072571578
bound_frac = 0.08018164865700761
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  8937070.600462947
Solve_result:  solved
Solve_time: 6.442434999999989 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(3, 138)  True    89,37,071     1,08,43,506   1.81s       limit         No        288.77s
(117, 143)True    89,37,071     91,15,996     0.81s       infeasible    No        289.73s
(141, 134)True    89,37,071     89,58,489     0.71s       solved        No        290.59s
(76, 126) True    89,37,071     89,03,721     1.23s       solved        Yes       291.99s

visited_nodes: [138, 143, 134, 126]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [135, 123, 17, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 58, 18, 68, 65, 77, 57, 23, 101, 6, 86, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(59, 135) True    89,03,721     91,51,647     1.87s       limit         No        294.12s
(50, 123) True    89,03,721     88,99,427     1.19s       solved        Yes       295.47s

visited_nodes: [138, 143, 134, 126, 135, 123]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [17, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 50, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(41, 17)  True    88,99,427     89,69,230     1.3s        solved        No        297.05s
(105, 112)True    88,99,427     93,04,516     1.86s       limit         No        299.07s
(29, 9)   True    88,99,427     90,25,820     1.8s        solved        No        301.03s
(39, 83)  True    88,99,427     91,35,678     1.63s       solved        No        302.83s
(44, 35)  True    88,99,427     89,18,294     0.65s       infeasible    No        303.64s
(126, 59) True    88,99,427     89,87,843     1.95s       limit         No        305.75s
(54, 93)  True    88,99,427     88,91,612     0.83s       solved        Yes       306.75s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93]

**********************************************************************************************
Iteration : 4 

self.sorted_nodes: [54, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(56, 54)  True    88,91,612     1,06,19,687   2.01s       limit         No        309.04s
(108, 105)True    88,91,612     88,81,670     1.85s       solved        Yes       311.05s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 54, 105]

**********************************************************************************************
Iteration : 5 

self.sorted_nodes: [108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(105, 108)True    88,81,670     88,79,760     1.55s       solved        Yes       312.86s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 54, 105, 108]

**********************************************************************************************
Iteration : 6 

self.sorted_nodes: [109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(82, 109) True    88,79,760     88,93,251     1.02s       solved        No        314.16s
(6, 85)   True    88,79,760     94,79,285     1.92s       limit         No        316.25s
(37, 76)  True    88,79,760     89,40,028     1.93s       limit         No        318.34s
(109, 89) True    88,79,760     88,66,184     0.85s       solved        Yes       319.36s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 54, 105, 108, 109, 85, 76, 89]

**********************************************************************************************
Iteration : 7 

self.sorted_nodes: [43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(40, 43)  True    88,66,184     96,35,596     1.94s       limit         No        321.56s
(101, 104)True    88,66,184     89,10,368     0.99s       solved        No        322.72s
(109, 2)  True    88,66,184     88,87,427     1.23s       solved        No        324.11s
(51, 103) True    88,66,184     89,76,699     1.37s       solved        No        325.64s
(92, 114) True    88,66,184     88,70,284     1.18s       solved        No        326.99s
(28, 51)  True    88,66,184     89,62,557     1.89s       limit         No        329.04s
(114, 5)  True    88,66,184     88,72,103     1.03s       solved        No        330.23s
(74, 60)  True    88,66,184     1,25,99,872   1.91s       limit         No        332.31s
(25, 49)  True    88,66,184     1,06,15,339   1.91s       limit         No        334.39s
(36, 42)  True    88,66,184     1,08,06,039   1.91s       limit         No        336.47s
(26, 74)  True    88,66,184     1,21,26,211   1.93s       limit         No        338.56s
(28, 111) True    88,66,184     88,66,609     1.2s        solved        No        339.92s
(73, 28)  True    88,66,184     88,71,152     0.86s       solved        No        340.95s
(60, 58)  True    88,66,184     93,08,336     1.99s       limit         No        343.1s
(4, 18)   True    88,66,184     88,84,058     1.87s       limit         No        345.14s
(21, 68)  True    88,66,184     88,70,062     1.3s        solved        No        346.6s
(23, 65)  True    88,66,184     88,78,593     1.27s       solved        No        348.03s
(77, 57)  True    88,66,184     89,50,713     0.91s       solved        No        349.11s
(18, 23)  True    88,66,184     88,69,992     0.84s       solved        No        350.12s
(31, 37)  True    88,66,184     88,96,981     1.05s       solved        No        351.33s
(70, 101) True    88,66,184     1,02,81,770   1.95s       limit         No        353.45s
(80, 6)   True    88,66,184     88,64,596     1.05s       solved        Yes       354.66s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 54, 105, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6]

**********************************************************************************************
Iteration : 8 

self.sorted_nodes: [80, 77, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(6, 80)   True    88,64,596     88,66,739     0.93s       solved        No        355.83s
(87, 77)  True    88,64,596     88,64,183     1.14s       solved        Yes       357.14s

visited_nodes: [138, 143, 134, 126, 135, 123, 17, 112, 9, 83, 35, 59, 93, 54, 105, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 80, 77]

**********************************************************************************************
Iteration : 9 

self.sorted_nodes: [24, 36, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(99, 24)  True    88,64,183     89,60,186     1.93s       limit         No        359.35s
(75, 36)  True    88,64,183     88,73,677     1.08s       solved        No        360.6s
(96, 47)  True    88,64,183     90,00,147     1.96s       limit         No        362.72s
(47, 53)  True    88,64,183     88,70,786     0.85s       solved        No        363.74s
(55, 100) True    88,64,183     92,98,325     1.57s       limit         No        365.47s
(53, 78)  True    88,64,183     88,64,465     0.89s       solved        No        366.52s
(91, 87)  True    88,64,183     90,03,840     1.97s       limit         No        368.66s
(48, 11)  True    88,64,183     88,68,952     1.43s       solved        No        370.26s
(87, 63)  True    88,64,183     89,12,861     1.84s       limit         No        372.26s
(119, 115)True    88,64,183     89,20,138     0.92s       solved        No        373.35s

**********************************Final best results******************************************

Water Network: d9_HG_SP_4_2
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,25       |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_2,48       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_2,89       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_2,109      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_3,12       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_4,18       |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_5,58       |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_5,114      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_6,10       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_7,34       |                   -0 |           5.6e-07    |
+-----------------+----------------------+----------------------+
| con2_8,78       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_9,22       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_9,29       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_9,59       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_10,72      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_11,48      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_11,52      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_12,22      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_13,45      |                   -0 |           1e-06      |
+-----------------+----------------------+----------------------+
| con2_14,97      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_15,128     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_16,110     |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_17,54      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_17,83      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_18,23      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_19,84      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_20,18      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_20,23      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_20,50      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_21,68      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_21,130     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_22,135     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_23,65      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_24,8       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_24,36      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_24,99      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_25,49      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_26,16      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_27,14      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_27,65      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_27,94      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_28,111     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_29,103     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_30,38      |                   -0 |           7e-08      |
+-----------------+----------------------+----------------------+
| con2_31,37      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_31,104     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_32,58      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_32,67      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_33,45      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_34,78      |                   -0 |           9e-08      |
+-----------------+----------------------+----------------------+
| con2_35,44      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_35,85      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_36,75      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_37,5       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_37,76      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_38,130     |                   -0 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_39,17      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_40,43      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_41,17      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_41,54      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_42,36      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_42,69      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_43,10      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_44,66      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_45,125     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_46,64      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_47,53      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_47,91      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_48,52      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_49,33      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_50,4       |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_51,28      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_52,81      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_53,63      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_53,91      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_54,93      |                    0 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_55,77      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_55,97      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_55,100     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_56,54      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_56,90      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_57,31      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_58,60      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_59,126     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_60,32      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_60,57      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_60,74      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_61,93      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_62,42      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_63,87      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_64,91      |                   -0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_65,96      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_66,85      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_67,16      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_68,20      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_68,94      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_69,106     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_70,87      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_71,9       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_71,119     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_72,62      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_73,28      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_73,32      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_74,26      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_74,67      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_75,42      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_75,101     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_76,5       |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_76,59      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_76,126     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_77,57      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_78,47      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_78,53      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_79,71      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_80,6       |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_80,10      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_81,104     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_82,80      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_83,39      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_83,40      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_84,123     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_85,6       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_85,43      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_86,28      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_86,58      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_87,77      |                   -0 |          -0.00084484 |
+-----------------+----------------------+----------------------+
| con2_88,114     |                   -0 |           5e-08      |
+-----------------+----------------------+----------------------+
| con2_89,80      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_89,109     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_90,1       |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_91,87      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_92,111     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_93,19      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_94,129     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_95,51      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_95,73      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_96,47      |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_97,100     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_98,118     |                   -0 |           3.3e-07    |
+-----------------+----------------------+----------------------+
| con2_99,63      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_100,46     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_101,24     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_101,70     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_102,35     |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_102,134    |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_103,51     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_103,95     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_104,101    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_105,103    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_105,108    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_106,75     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_107,116    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_108,95     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_109,52     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_109,82     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_110,14     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_110,49     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_111,86     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_111,114    |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_112,29     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_112,105    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_112,108    |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_113,2      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_114,92     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_115,22     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_115,138    |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_116,142    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_117,79     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_118,90     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_119,115    |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_120,39     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_121,128    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_122,107    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_123,50     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_124,121    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_125,1      |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_125,49     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_126,11     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_126,104    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_127,136    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_128,112    |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_129,21     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_130,61     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_130,93     |                    0 |           0          |
+-----------------+----------------------+----------------------+
| con2_131,102    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_132,133    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_133,41     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_134,141    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_135,59     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_135,113    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_136,141    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_137,143    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_138,3      |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_139,134    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_140,121    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_141,102    |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_142,15     |                   -0 |           0          |
+-----------------+----------------------+----------------------+
| con2_143,79     |                    0 |          -0          |
+-----------------+----------------------+----------------------+
| con2_143,117    |                   -0 |           0          |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 1.0864303239556536e-10
Total relative constraint violation: 0.000846969511709646
*******************************************************************************

Final best objective: 8864183.04480274
Number of nlp problem solved: 110
Total number of iteration: 9
Solver_time: 361.24 seconds
Heuristic elapsed time: 373.39 seconds

