Water Network: d8_HG_SP_3_4 

Testing bound_push=0.0007964941807419507, bound_frac=0.0013346327388505377
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007964941807419507
bound_frac: 0.0013346327388505377
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007964941807419507
bound_frac = 0.0013346327388505377
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6973410.905102125
Testing bound_push=0.0002689600574432844, bound_frac=0.0013447606404736452
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0002689600574432844
bound_frac: 0.0013447606404736452
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0002689600574432844
bound_frac = 0.0013447606404736452
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6967224.841795089
Testing bound_push=0.000451533887147242, bound_frac=0.0030178590033537954
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000451533887147242
bound_frac: 0.0030178590033537954
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000451533887147242
bound_frac = 0.0030178590033537954
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6984597.916049007
Testing bound_push=0.0009179268448451448, bound_frac=0.001416956987502911
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009179268448451448
bound_frac: 0.001416956987502911
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009179268448451448
bound_frac = 0.001416956987502911
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971228.045088837
Testing bound_push=0.0004229069748807349, bound_frac=0.009894577074967369
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004229069748807349
bound_frac: 0.009894577074967369
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004229069748807349
bound_frac = 0.009894577074967369
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Maximum Number of Iterations Exceeded.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6963970.276264755
Testing bound_push=0.00030371506408449127, bound_frac=1e-06
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00030371506408449127
bound_frac: 1e-06
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00030371506408449127
bound_frac = 1e-06
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Maximum Number of Iterations Exceeded.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974609.4383451305
Testing bound_push=0.0008356134147678245, bound_frac=0.0006877495506732326
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008356134147678245
bound_frac: 0.0006877495506732326
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008356134147678245
bound_frac = 0.0006877495506732326
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970568.181371945
Testing bound_push=0.00084209836610975, bound_frac=0.005034308298195211
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00084209836610975
bound_frac: 0.005034308298195211
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00084209836610975
bound_frac = 0.005034308298195211
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6964787.958299222
Testing bound_push=0.0009743732439614263, bound_frac=0.0007634980719001864
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009743732439614263
bound_frac: 0.0007634980719001864
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009743732439614263
bound_frac = 0.0007634980719001864
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6977200.805268257
Testing bound_push=0.000791167874872437, bound_frac=0.01
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000791167874872437
bound_frac: 0.01
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000791167874872437
bound_frac = 0.01
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.724439711
Testing bound_push=0.00024760429970362304, bound_frac=0.00041078739996475795
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00024760429970362304
bound_frac: 0.00041078739996475795
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00024760429970362304
bound_frac = 0.00041078739996475795
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.336616034
Testing bound_push=0.0008538514632736112, bound_frac=0.0004721242790542561
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008538514632736112
bound_frac: 0.0004721242790542561
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008538514632736112
bound_frac = 0.0004721242790542561
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970574.797312709
Testing bound_push=0.001, bound_frac=0.003926744009132396
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.001
bound_frac: 0.003926744009132396
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.001
bound_frac = 0.003926744009132396
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980170.018423916
Testing bound_push=0.0007321067245489126, bound_frac=0.0006310797038509758
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007321067245489126
bound_frac: 0.0006310797038509758
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007321067245489126
bound_frac = 0.0006310797038509758
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.88073352
Testing bound_push=0.0007508717022941368, bound_frac=0.00854599330298998
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007508717022941368
bound_frac: 0.00854599330298998
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007508717022941368
bound_frac = 0.00854599330298998
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980170.020475272
Testing bound_push=0.00021954891751318893, bound_frac=0.0006156810999471369
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00021954891751318893
bound_frac: 0.0006156810999471369
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00021954891751318893
bound_frac = 0.0006156810999471369
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.682993628
Testing bound_push=0.0006274715190536921, bound_frac=0.0006973481741236592
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006274715190536921
bound_frac: 0.0006973481741236592
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006274715190536921
bound_frac = 0.0006973481741236592
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.5594423115
Testing bound_push=0.001, bound_frac=0.003183096500941813
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.001
bound_frac: 0.003183096500941813
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.001
bound_frac = 0.003183096500941813
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980170.018423916
Testing bound_push=0.0005874821543153832, bound_frac=0.0007067023889780843
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005874821543153832
bound_frac: 0.0007067023889780843
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005874821543153832
bound_frac = 0.0007067023889780843
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.877520739
Testing bound_push=0.0005771293462800191, bound_frac=0.005414105143487722
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005771293462800191
bound_frac: 0.005414105143487722
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005771293462800191
bound_frac = 0.005414105143487722
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.338931027
Testing bound_push=0.0003398068285938751, bound_frac=0.000754729550528127
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0003398068285938751
bound_frac: 0.000754729550528127
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0003398068285938751
bound_frac = 0.000754729550528127
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961873.814711454
Testing bound_push=0.0005142815469437325, bound_frac=0.0008099601216583607
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005142815469437325
bound_frac: 0.0008099601216583607
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005142815469437325
bound_frac = 0.0008099601216583607
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980309.467552183
Testing bound_push=0.0008311076849198604, bound_frac=0.0023544536870993065
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008311076849198604
bound_frac: 0.0023544536870993065
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008311076849198604
bound_frac = 0.0023544536870993065
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6963281.572726231
Testing bound_push=0.000633107466245743, bound_frac=0.0008809021869600309
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000633107466245743
bound_frac: 0.0008809021869600309
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000633107466245743
bound_frac = 0.0008809021869600309
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970568.215395495
Testing bound_push=0.0005122940640058251, bound_frac=0.0027926722478167306
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005122940640058251
bound_frac: 0.0027926722478167306
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005122940640058251
bound_frac = 0.0027926722478167306
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970414.403257147
Testing bound_push=0.00045120482231873586, bound_frac=0.0007824692815253626
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00045120482231873586
bound_frac: 0.0007824692815253626
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00045120482231873586
bound_frac = 0.0007824692815253626
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.579819247
Testing bound_push=0.0005423788987808288, bound_frac=0.0008171171276940304
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005423788987808288
bound_frac: 0.0008171171276940304
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005423788987808288
bound_frac = 0.0008171171276940304
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6992287.672588033
Testing bound_push=0.0007052120314278295, bound_frac=0.0014014400814928597
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007052120314278295
bound_frac: 0.0014014400814928597
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007052120314278295
bound_frac = 0.0014014400814928597
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6984545.276226451
Testing bound_push=0.0006553832484839893, bound_frac=0.0009545064243689382
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006553832484839893
bound_frac: 0.0009545064243689382
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006553832484839893
bound_frac = 0.0009545064243689382
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.699002424
Testing bound_push=0.0004921056653181402, bound_frac=0.0008125117741618155
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004921056653181402
bound_frac: 0.0008125117741618155
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004921056653181402
bound_frac = 0.0008125117741618155
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.559339242
Stopping search: maximum iterations reached --> 5
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004921056653181402
bound_frac: 0.0008125117741618155
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004921056653181402
bound_frac = 0.0008125117741618155
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  6961709.559339242
Solve_result:  solved
Solve_time: 0.9073549999999955 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(44, 78)  True    69,61,710     75,97,013     0.52s       solved        No        45.32s
(38, 76)  True    69,61,710     83,22,650     0.55s       infeasible    No        45.91s
(78, 24)  True    69,61,710     92,48,134     0.82s       limit         No        46.76s
(2, 3)    True    69,61,710     1,12,73,987   0.78s       infeasible    No        47.57s
(41, 51)  True    69,61,710     83,09,740     0.56s       infeasible    No        48.16s
(27, 21)  True    69,61,710     73,71,480     0.65s       infeasible    No        48.83s
(58, 66)  True    69,61,710     73,15,305     0.27s       solved        No        49.13s
(60, 41)  True    69,61,710     70,47,422     0.21s       solved        No        49.36s
(19, 64)  True    69,61,710     82,91,667     0.38s       failure       No        49.77s
(30, 56)  True    69,61,710     79,27,571     0.91s       limit         No        50.71s
(77, 42)  True    69,61,710     84,12,769     0.58s       infeasible    No        51.31s
(42, 32)  True    69,61,710     72,13,754     0.72s       limit         No        52.08s
(45, 17)  True    69,61,710     63,14,263     0.24s       infeasible    No        52.37s
(35, 39)  True    69,61,710     69,12,397     0.12s       solved        Yes       52.51s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [35] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(39, 35)  True    69,12,397     68,87,837     0.13s       solved        Yes       52.71s

visited_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39, 35]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        

**********************************Final best results******************************************

Water Network: d8_HG_SP_3_4
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,62       |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_2,63       |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_3,2        |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_4,65       |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_4,66       |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_5,20       |               -1e-08 |           1.32e-05   |
+-----------------+----------------------+----------------------+
| con2_6,36       |               -0     |           0.00403693 |
+-----------------+----------------------+----------------------+
| con2_7,48       |               -1e-08 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_8,47       |               -0     |           0.00266384 |
+-----------------+----------------------+----------------------+
| con2_9,82       |               -1e-08 |           0.00083864 |
+-----------------+----------------------+----------------------+
| con2_10,81      |               -4e-08 |           3.997e-05  |
+-----------------+----------------------+----------------------+
| con2_11,37      |               -1e-08 |           3.841e-05  |
+-----------------+----------------------+----------------------+
| con2_12,49      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_13,76      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_14,45      |               -0     |           0.00010059 |
+-----------------+----------------------+----------------------+
| con2_15,57      |               -2e-08 |           0.0002724  |
+-----------------+----------------------+----------------------+
| con2_16,18      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_17,45      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_18,75      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_19,64      |                0     |           7e-08      |
+-----------------+----------------------+----------------------+
| con2_20,50      |               -1e-08 |           8.38e-06   |
+-----------------+----------------------+----------------------+
| con2_21,7       |               -1e-08 |           2e-08      |
+-----------------+----------------------+----------------------+
| con2_21,27      |               -2e-08 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_21,48      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_22,62      |               -0     |           3.37e-06   |
+-----------------+----------------------+----------------------+
| con2_23,34      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_24,3       |                3e-08 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_24,69      |               -4e-08 |           1.6e-07    |
+-----------------+----------------------+----------------------+
| con2_24,78      |               -1e-08 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_25,43      |               -0     |           0.00109459 |
+-----------------+----------------------+----------------------+
| con2_26,59      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_26,63      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_27,66      |               -1e-08 |           1e-08      |
+-----------------+----------------------+----------------------+
| con2_28,31      |               -1e-08 |           0.00126889 |
+-----------------+----------------------+----------------------+
| con2_29,11      |               -2e-08 |           0.00025212 |
+-----------------+----------------------+----------------------+
| con2_30,52      |               -0     |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_31,58      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_32,77      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_33,40      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_34,32      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_35,16      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_36,43      |               -0     |           0.00076123 |
+-----------------+----------------------+----------------------+
| con2_37,5       |               -1e-08 |           1.974e-05  |
+-----------------+----------------------+----------------------+
| con2_38,60      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_39,16      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_39,35      |               -0     |           6e-08      |
+-----------------+----------------------+----------------------+
| con2_40,13      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_41,35      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_41,60      |               -1e-08 |           5e-08      |
+-----------------+----------------------+----------------------+
| con2_42,32      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_42,77      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_43,14      |               -0     |           0.00014996 |
+-----------------+----------------------+----------------------+
| con2_44,26      |               -1e-08 |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_45,55      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_46,21      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_47,55      |               -0     |           0.00038525 |
+-----------------+----------------------+----------------------+
| con2_48,66      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_49,31      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_50,22      |               -1e-08 |           4.08e-06   |
+-----------------+----------------------+----------------------+
| con2_51,41      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_51,76      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_52,39      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_52,56      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_53,25      |               -0     |           0.00679117 |
+-----------------+----------------------+----------------------+
| con2_54,64      |               -1e-08 |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_55,62      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_56,30      |               -0     |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_56,41      |                1e-08 |           9e-08      |
+-----------------+----------------------+----------------------+
| con2_57,51      |                3e-08 |           2.8e-07    |
+-----------------+----------------------+----------------------+
| con2_57,72      |               -2e-08 |           7e-08      |
+-----------------+----------------------+----------------------+
| con2_58,4       |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_59,19      |                1e-08 |           6e-08      |
+-----------------+----------------------+----------------------+
| con2_59,64      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_60,16      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_61,50      |               -1e-08 |           0.00069842 |
+-----------------+----------------------+----------------------+
| con2_62,17      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_63,40      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_64,42      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_65,23      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_66,58      |               -1e-08 |           4e-08      |
+-----------------+----------------------+----------------------+
| con2_67,46      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_68,80      |               -0     |           5.4e-07    |
+-----------------+----------------------+----------------------+
| con2_69,54      |               -3e-08 |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_70,12      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_71,68      |               -2e-08 |           2.17e-06   |
+-----------------+----------------------+----------------------+
| con2_72,51      |                0     |           0          |
+-----------------+----------------------+----------------------+
| con2_72,56      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_73,57      |               -3e-08 |           5e-07      |
+-----------------+----------------------+----------------------+
| con2_74,67      |               -1e-08 |           5.15e-06   |
+-----------------+----------------------+----------------------+
| con2_75,17      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_76,38      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_77,33      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_78,26      |               -3e-08 |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_78,44      |               -1e-08 |           3e-08      |
+-----------------+----------------------+----------------------+
| con2_79,69      |               -8e-08 |           1.4e-07    |
+-----------------+----------------------+----------------------+
| con2_80,67      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_81,3       |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_82,81      |               -0     |           0          |
+-----------------+----------------------+----------------------+
| con2_83,70      |               -0     |           0          |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 6.199930878192135e-07
Total relative constraint violation: 0.019450857766138866
*******************************************************************************

Final best objective: 6887836.554445145
Number of nlp problem solved: 46
Total number of iteration: 3
Solver_time: 51.92 seconds
Heuristic elapsed time: 52.72 seconds

