Water Network: d8_HG_SP_3_4 

Testing bound_push=0.0005042011058739403, bound_frac=0.006510679550623515
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005042011058739403
bound_frac: 0.006510679550623515
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005042011058739403
bound_frac = 0.006510679550623515
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.887425834
Testing bound_push=0.00018374029085464923, bound_frac=0.004095562009698624
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00018374029085464923
bound_frac: 0.004095562009698624
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00018374029085464923
bound_frac = 0.004095562009698624
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970574.803144399
Testing bound_push=0.0007599836452368926, bound_frac=0.0008719508882633293
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007599836452368926
bound_frac: 0.0008719508882633293
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007599836452368926
bound_frac = 0.0008719508882633293
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6972301.885352223
Testing bound_push=0.0005222584025741523, bound_frac=0.005951582168324952
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005222584025741523
bound_frac: 0.005951582168324952
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005222584025741523
bound_frac = 0.005951582168324952
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.7080262005
Testing bound_push=0.0006799349584909366, bound_frac=0.0059486303663896165
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006799349584909366
bound_frac: 0.0059486303663896165
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006799349584909366
bound_frac = 0.0059486303663896165
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.708042624
Testing bound_push=0.0005097787085492095, bound_frac=0.003768998086560362
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005097787085492095
bound_frac: 0.003768998086560362
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005097787085492095
bound_frac = 0.003768998086560362
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961873.822514012
Testing bound_push=0.0004934636580589964, bound_frac=0.006715984688312678
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0004934636580589964
bound_frac: 0.006715984688312678
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0004934636580589964
bound_frac = 0.006715984688312678
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.71003445
Testing bound_push=0.0007364098521793044, bound_frac=0.0052704344257677145
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007364098521793044
bound_frac: 0.0052704344257677145
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007364098521793044
bound_frac = 0.0052704344257677145
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.732354992
Testing bound_push=0.0009594067878548994, bound_frac=0.0011862208852409482
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009594067878548994
bound_frac: 0.0011862208852409482
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009594067878548994
bound_frac = 0.0011862208852409482
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.708030902
Testing bound_push=0.00023962626358022053, bound_frac=0.0028362584482578617
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00023962626358022053
bound_frac: 0.0028362584482578617
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00023962626358022053
bound_frac = 0.0028362584482578617
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6982369.200040529
Testing bound_push=0.0005125675098868441, bound_frac=0.002398157354528786
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005125675098868441
bound_frac: 0.002398157354528786
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005125675098868441
bound_frac = 0.002398157354528786
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6970568.222610467
Testing bound_push=0.0006520814217750755, bound_frac=0.0067702235060862195
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006520814217750755
bound_frac: 0.0067702235060862195
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006520814217750755
bound_frac = 0.0067702235060862195
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.708042895
Testing bound_push=0.0006207090212432087, bound_frac=0.00624028435866415
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006207090212432087
bound_frac: 0.00624028435866415
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006207090212432087
bound_frac = 0.00624028435866415
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.585670174
Testing bound_push=0.00092019815421316, bound_frac=0.0013574797417448448
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00092019815421316
bound_frac: 0.0013574797417448448
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00092019815421316
bound_frac = 0.0013574797417448448
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.567485908
Testing bound_push=0.0003718365447090488, bound_frac=0.0021005271973082744
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0003718365447090488
bound_frac: 0.0021005271973082744
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0003718365447090488
bound_frac = 0.0021005271973082744
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.701300685
Testing bound_push=0.0005799796256080392, bound_frac=0.0021367390161127152
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005799796256080392
bound_frac: 0.0021367390161127152
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005799796256080392
bound_frac = 0.0021367390161127152
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6966479.270324793
Testing bound_push=0.0008342788768191587, bound_frac=0.006651325158926535
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008342788768191587
bound_frac: 0.006651325158926535
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008342788768191587
bound_frac = 0.006651325158926535
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.346585575
Testing bound_push=0.0006993813016849864, bound_frac=0.004976852356156391
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006993813016849864
bound_frac: 0.004976852356156391
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006993813016849864
bound_frac = 0.004976852356156391
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6963281.580485172
Testing bound_push=0.0009005938373922904, bound_frac=0.001443109169996793
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009005938373922904
bound_frac: 0.001443109169996793
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009005938373922904
bound_frac = 0.001443109169996793
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968570.307449441
Testing bound_push=0.00045154605749868316, bound_frac=0.0017114188120104974
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00045154605749868316
bound_frac: 0.0017114188120104974
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00045154605749868316
bound_frac = 0.0017114188120104974
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974629.205167558
Testing bound_push=0.0007302363831241831, bound_frac=0.0019061854696213504
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007302363831241831
bound_frac: 0.0019061854696213504
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007302363831241831
bound_frac = 0.0019061854696213504
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Solved To Acceptable Level.

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.707842496
Testing bound_push=0.000936052788584466, bound_frac=0.004931691158798813
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.000936052788584466
bound_frac: 0.004931691158798813
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.000936052788584466
bound_frac = 0.004931691158798813
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.707963252
Testing bound_push=0.0008007075251078749, bound_frac=0.002741835958489787
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008007075251078749
bound_frac: 0.002741835958489787
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008007075251078749
bound_frac = 0.002741835958489787
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961856.346585676
Testing bound_push=0.0009038458805607943, bound_frac=0.0014121333018200172
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009038458805607943
bound_frac: 0.0014121333018200172
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009038458805607943
bound_frac = 0.0014121333018200172
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971066.587776956
Testing bound_push=0.0005855228418269921, bound_frac=0.001510490473578556
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0005855228418269921
bound_frac: 0.001510490473578556
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0005855228418269921
bound_frac = 0.001510490473578556
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6980170.026338247
Testing bound_push=0.0007863003822080258, bound_frac=0.002082288549478737
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0007863003822080258
bound_frac: 0.002082288549478737
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0007863003822080258
bound_frac = 0.002082288549478737
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6974407.730407981
Testing bound_push=0.0009763046609245031, bound_frac=0.003914983681912776
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009763046609245031
bound_frac: 0.003914983681912776
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009763046609245031
bound_frac = 0.003914983681912776
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6961709.567960477
Testing bound_push=0.0008613625826314181, bound_frac=0.0013960176068868089
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0008613625826314181
bound_frac: 0.0013960176068868089
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0008613625826314181
bound_frac = 0.0013960176068868089
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6971333.777589249
Testing bound_push=0.0009113425774265452, bound_frac=0.0013632517794541202
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0009113425774265452
bound_frac: 0.0013632517794541202
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0009113425774265452
bound_frac = 0.0013632517794541202
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6968349.708042518
Testing bound_push=0.0006510388101999756, bound_frac=0.0015819241814386902
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.0006510388101999756
bound_frac: 0.0015819241814386902
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.0006510388101999756
bound_frac = 0.0015819241814386902
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 6966479.268285284
Stopping search: maximum iterations reached --> 5
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(82, 81), (70, 12), (83, 70), (6, 36), (74, 67), (15, 57), (67, 46), (12, 49), (71, 68), (79, 69), (20, 50), (36, 43), (47, 55), (22, 62), (80, 67), (37, 5), (49, 31), (53, 25), (25, 43), (43, 14), (46, 21), (31, 58), (10, 81), (14, 45), (68, 80), (61, 50), (8, 47), (11, 37), (1, 62), (81, 3), (5, 20), (50, 22), (28, 31), (9, 82), (73, 57), (29, 11)}
super_source_out_arc: [(1, 62), (62, 22), (62, 55), (62, 17)] 

bound_push: 0.00092019815421316
bound_frac: 0.0013574797417448448
Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
bound_push = 0.00092019815421316
bound_frac = 0.0013574797417448448
warm_start_init_point = yes
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  6961709.567485908
Solve_result:  solved
Solve_time: 0.7378919999999951 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [78, 76, 24, 3, 51, 21, 66, 41, 64, 56, 42, 32, 17, 39] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(44, 78)  True    69,61,710     75,39,969     0.73s       solved        No        40.17s
(38, 76)  True    69,61,710     83,25,176     0.34s       infeasible    No        40.54s
(78, 24)  True    69,61,710     92,62,169     0.86s       limit         No        41.43s
(2, 3)    True    69,61,710     1,14,10,235   0.82s       infeasible    No        42.27s
(41, 51)  True    69,61,710     82,55,645     0.73s       infeasible    No        43.05s
(27, 21)  True    69,61,710     74,89,531     0.51s       infeasible    No        43.61s
(58, 66)  True    69,61,710     73,16,500     0.28s       solved        No        43.92s
(60, 41)  True    69,61,710     70,69,052     0.19s       solved        No        44.14s
(19, 64)  True    69,61,710     96,93,232     0.78s       limit         No        44.95s
(30, 56)  True    69,61,710     78,29,910     0.67s       infeasible    No        45.65s
(77, 42)  True    69,61,710     86,29,054     0.37s       infeasible    No        46.05s
(42, 32)  True    69,61,710     81,26,090     0.48s       infeasible    No        46.56s
(45, 17)  True    69,61,710     66,65,406     0.15s       infeasible    No        46.74s
(35, 39)  True    69,61,710     69,69,984     0.13s       solved        No        46.89s

**********************************Final best results******************************************

Water Network: d8_HG_SP_3_4
*******************************************************************************

Constraint violations:

+-----------------+----------------------+----------------------+
| Constraint ID   |   Absolute Violation |   Relative Violation |
+=================+======================+======================+
| con2_1,62       |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_2,63       |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_3,2        |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_4,65       |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_4,66       |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_5,20       |              1e-08   |          -2.65e-05   |
+-----------------+----------------------+----------------------+
| con2_6,36       |              1e-08   |          -0.00874498 |
+-----------------+----------------------+----------------------+
| con2_7,48       |              1e-08   |          -4e-08      |
+-----------------+----------------------+----------------------+
| con2_8,47       |              1e-08   |          -0.00567622 |
+-----------------+----------------------+----------------------+
| con2_9,82       |              2e-08   |          -0.00173528 |
+-----------------+----------------------+----------------------+
| con2_10,81      |              8e-08   |          -8.051e-05  |
+-----------------+----------------------+----------------------+
| con2_11,37      |              2e-08   |          -7.735e-05  |
+-----------------+----------------------+----------------------+
| con2_12,49      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_13,76      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_14,45      |              1e-08   |          -0.00020348 |
+-----------------+----------------------+----------------------+
| con2_15,57      |              3e-08   |          -0.00055519 |
+-----------------+----------------------+----------------------+
| con2_16,18      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_17,45      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_18,75      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_19,64      |             -0       |          -1.3e-07    |
+-----------------+----------------------+----------------------+
| con2_20,50      |              2e-08   |          -1.682e-05  |
+-----------------+----------------------+----------------------+
| con2_21,7       |              2e-08   |          -4e-08      |
+-----------------+----------------------+----------------------+
| con2_21,27      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_21,48      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_22,62      |              1e-08   |          -6.75e-06   |
+-----------------+----------------------+----------------------+
| con2_23,34      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_24,3       |             -7e-08   |          -2e-08      |
+-----------------+----------------------+----------------------+
| con2_24,69      |              8e-08   |          -3.2e-07    |
+-----------------+----------------------+----------------------+
| con2_24,78      |              2e-08   |          -2e-08      |
+-----------------+----------------------+----------------------+
| con2_25,43      |              0       |          -0.0022766  |
+-----------------+----------------------+----------------------+
| con2_26,59      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_26,63      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_27,66      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_28,31      |              2e-08   |          -0.00264762 |
+-----------------+----------------------+----------------------+
| con2_29,11      |              3e-08   |          -0.00051347 |
+-----------------+----------------------+----------------------+
| con2_30,52      |              1e-08   |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_31,58      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_32,77      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_33,40      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_34,32      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_35,16      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_36,43      |              0       |          -0.00157243 |
+-----------------+----------------------+----------------------+
| con2_37,5       |              1e-08   |          -3.967e-05  |
+-----------------+----------------------+----------------------+
| con2_38,60      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_39,16      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_39,35      |              0       |          -1.3e-07    |
+-----------------+----------------------+----------------------+
| con2_40,13      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_41,35      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_41,60      |              2e-08   |          -1e-07      |
+-----------------+----------------------+----------------------+
| con2_42,32      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_42,77      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_43,14      |              0       |          -0.00030412 |
+-----------------+----------------------+----------------------+
| con2_44,26      |              3e-08   |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_45,55      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_46,21      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_47,55      |              1e-08   |          -0.00078812 |
+-----------------+----------------------+----------------------+
| con2_48,66      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_49,31      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_50,22      |              1e-08   |          -8.18e-06   |
+-----------------+----------------------+----------------------+
| con2_51,41      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_51,76      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_52,39      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_52,56      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_53,25      |              1e-08   |          -0.0151223  |
+-----------------+----------------------+----------------------+
| con2_54,64      |              2e-08   |          -5e-08      |
+-----------------+----------------------+----------------------+
| con2_55,62      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_56,30      |              0       |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_56,41      |             -2e-08   |          -1.7e-07    |
+-----------------+----------------------+----------------------+
| con2_57,51      |             -6e-08   |          -5.7e-07    |
+-----------------+----------------------+----------------------+
| con2_57,72      |              3e-08   |          -1.4e-07    |
+-----------------+----------------------+----------------------+
| con2_58,4       |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_59,19      |             -1e-08   |          -1.3e-07    |
+-----------------+----------------------+----------------------+
| con2_59,64      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_60,16      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_61,50      |              2e-08   |          -0.00144062 |
+-----------------+----------------------+----------------------+
| con2_62,17      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_63,40      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_64,42      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_65,23      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_66,58      |              1e-08   |          -7e-08      |
+-----------------+----------------------+----------------------+
| con2_67,46      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_68,80      |              0       |          -1.09e-06   |
+-----------------+----------------------+----------------------+
| con2_69,54      |              6e-08   |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_70,12      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_71,68      |              4e-08   |          -4.34e-06   |
+-----------------+----------------------+----------------------+
| con2_72,51      |             -0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_72,56      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_73,57      |              6e-08   |          -1e-06      |
+-----------------+----------------------+----------------------+
| con2_74,67      |              2e-08   |          -1.033e-05  |
+-----------------+----------------------+----------------------+
| con2_75,17      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_76,38      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_77,33      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_78,26      |              5e-08   |          -6e-08      |
+-----------------+----------------------+----------------------+
| con2_78,44      |              3e-08   |          -7e-08      |
+-----------------+----------------------+----------------------+
| con2_79,69      |              1.6e-07 |          -2.9e-07    |
+-----------------+----------------------+----------------------+
| con2_80,67      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_81,3       |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_82,81      |              0       |          -0          |
+-----------------+----------------------+----------------------+
| con2_83,70      |              0       |          -0          |
+-----------------+----------------------+----------------------+

Total absolute constraint violation: 1.1904340413470485e-06
Total relative constraint violation: 0.041855548653891586
*******************************************************************************

Final best objective: 6961709.567485908
Number of nlp problem solved: 45
Total number of iteration: 1
Solver_time: 46.20 seconds
Heuristic elapsed time: 46.90 seconds

