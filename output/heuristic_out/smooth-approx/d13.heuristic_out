Water Network: d13 

Testing bound_push=0.0021286961934161037, bound_frac=0.0012278136453114424
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0021286961934161037
bound_frac = 0.0012278136453114424
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 14896325.214235855
Testing bound_push=0.009414835160945396, bound_frac=0.008769516973720828
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.009414835160945396
bound_frac = 0.008769516973720828
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 14896325.214235863
Testing bound_push=0.0015616971767639706, bound_frac=0.004681970752887864
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0015616971767639706
bound_frac = 0.004681970752887864
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 14896325.21423611
Testing bound_push=0.00406932340246618, bound_frac=0.01
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.00406932340246618
bound_frac = 0.01
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 14896325.214235881
Testing bound_push=0.0014588842273825595, bound_frac=0.004413098773340576
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0014588842273825595
bound_frac = 0.004413098773340576
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 14896325.21423585
Stopping search: Swarm best objective change less than 1e-08
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(11, 1), (9, 3), (3, 7), (3, 10), (8, 9), (4, 11), (10, 2)}
super_source_out_arc: [(8, 9), (9, 3), (3, 7), (3, 10), (10, 2), (2, 6), (2, 4)] 

min_demand: 0.0
max_demand: 0.0068
max_flow: 0.024900000000000002
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0014588842273825595
bound_frac = 0.004413098773340576
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  14896325.21423585
Solve_result:  solved
Solve_time: 0.14914399999999994 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [6] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(4, 6)    True    1,48,96,325   1,51,76,154   0.04s       solved        No        1.41s

**********************************Final best results******************************************

Water Network: d13
*******************************************************************************

Constraint violations:


Total absolute constraint violation: 2.600391148070702e-19
Total relative constraint violation: 1.4714738297312299e-15
*******************************************************************************

Final best objective: 14896325.21423585
Number of nlp problem solved: 13
Total number of iteration: 1
Solver_time: 1.23 seconds
Heuristic elapsed time: 1.41 seconds

