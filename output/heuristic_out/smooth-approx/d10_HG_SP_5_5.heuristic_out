Water Network: d10_HG_SP_5_5 

Testing bound_push=0.009771270092455988, bound_frac=0.002403342714212716
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.009771270092455988
bound_frac = 0.002403342714212716
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9622885.990743333
Testing bound_push=0.00714019461106607, bound_frac=0.0015991661050383337
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.00714019461106607
bound_frac = 0.0015991661050383337
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9646028.831677763
Testing bound_push=0.00534826785680223, bound_frac=0.007024710150954664
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.00534826785680223
bound_frac = 0.007024710150954664
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9641906.10563354
Testing bound_push=0.01, bound_frac=0.003218763619280947
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.01
bound_frac = 0.003218763619280947
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9649328.71780248
Testing bound_push=0.005115749085564004, bound_frac=0.007007939784839607
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.005115749085564004
bound_frac = 0.007007939784839607
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9695913.2288098
Testing bound_push=0.01, bound_frac=0.003248996294230934
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.01
bound_frac = 0.003248996294230934
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9697607.597663224
Stopping search: maximum iterations reached --> 2
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(104, 99), (46, 109), (74, 134), (131, 125), (87, 98), (101, 11), (61, 106), (119, 86), (97, 55), (128, 3), (92, 108), (60, 103), (62, 128), (138, 62), (73, 24), (139, 152), (96, 114), (17, 10), (152, 149), (68, 12), (114, 73)}
super_source_out_arc: [(1, 4), (1, 7), (1, 65)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.98787416
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.009771270092455988
bound_frac = 0.002403342714212716
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  9622885.990743333
Solve_result:  solved
Solve_time: 5.187833000000001 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [148, 149, 150, 153, 155, 135, 141, 124, 129, 9, 27, 3, 103, 57, 116, 75, 25, 18, 20, 100, 59, 121, 111, 70, 58, 63, 5, 32, 90, 26, 21, 64, 65, 79, 22, 2, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(27, 148) True    96,22,886     98,85,286     1.92s       solved        No        48.0s
(9, 149)  True    96,22,886     1,19,04,709   2.84s       limit         No        68.32s
(15, 150) True    96,22,886     1,16,48,323   2.79s       limit         No        87.27s
(109, 153)True    96,22,886     1,15,95,187   2.65s       limit         No        107.23s
(29, 155) True    96,22,886     1,04,47,128   2.13s       solved        No        123.83s
(67, 135) True    96,22,886     97,31,762     1.87s       solved        No        140.14s
(83, 141) True    96,22,886     1,30,82,152   2.72s       limit         No        160.17s
(130, 124)True    96,22,886     94,55,380     1.49s       solved        Yes       177.02s

visited_nodes: [148, 149, 150, 153, 155, 135, 141, 124]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [151, 129, 130, 9, 27, 3, 103, 57, 116, 75, 25, 18, 20, 100, 59, 121, 111, 70, 58, 63, 5, 32, 90, 26, 21, 64, 65, 79, 22, 2, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(154, 151)True    94,55,380     98,66,708     2.33s       solved        No        192.97s
(50, 129) True    94,55,380     96,01,830     1.58s       solved        No        202.54s
(82, 130) True    94,55,380     94,12,869     1.24s       solved        Yes       212.14s

visited_nodes: [148, 149, 150, 153, 155, 135, 141, 124, 151, 129, 130]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [9, 27, 82, 3, 103, 57, 116, 75, 25, 18, 20, 100, 59, 121, 111, 70, 58, 63, 5, 32, 90, 26, 21, 64, 65, 79, 22, 2, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(81, 9)   True    94,12,869     1,08,98,022   2.69s       limit         No        232.3s
(107, 27) True    94,12,869     1,00,70,982   2.14s       solved        No        249.01s
(130, 82) True    94,12,869     93,73,014     1.15s       solved        Yes       263.53s

visited_nodes: [148, 149, 150, 153, 155, 135, 141, 124, 151, 129, 130, 9, 27, 82]

**********************************************************************************************
Iteration : 4 

self.sorted_nodes: [146, 3, 103, 57, 116, 75, 25, 20, 100, 59, 121, 102, 58, 16, 63, 5, 32, 90, 26, 64, 65, 79, 22, 2, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(35, 146) True    93,73,014     96,15,775     2.45s       solved        No        280.29s
(115, 3)  True    93,73,014     96,00,119     1.21s       solved        No        288.63s
(133, 103)True    93,73,014     1,11,43,903   2.5s        limit         No        308.32s
(132, 57) True    93,73,014     95,84,094     1.69s       solved        No        322.38s
(117, 116)True    93,73,014     1,00,51,121   2.66s       limit         No        341.74s
(32, 75)  True    93,73,014     93,84,075     1.38s       solved        No        352.1s
(72, 25)  True    93,73,014     1,22,84,946   2.26s       limit         No        371.55s
(113, 20) True    93,73,014     94,80,039     0.25s       solved        No        377.62s
(137, 100)True    93,73,014     1,05,44,910   2.7s        limit         No        397.68s
(108, 59) True    93,73,014     1,30,91,271   2.63s       limit         No        416.6s
(6, 121)  True    93,73,014     96,81,958     1.13s       solved        No        427.58s
(28, 102) True    93,73,014     97,41,179     1.54s       solved        No        440.82s
(21, 58)  True    93,73,014     93,71,498     1.27s       solved        Yes       449.42s

visited_nodes: [148, 149, 150, 153, 155, 135, 141, 124, 151, 129, 130, 9, 27, 82, 146, 3, 103, 57, 116, 75, 25, 20, 100, 59, 121, 102, 58]

**********************************************************************************************
Iteration : 5 

self.sorted_nodes: [76, 16, 63, 5, 32, 90, 26, 21, 64, 40, 65, 79, 22, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(36, 76)  True    93,71,498     95,63,140     2.59s       limit         No        469.19s
(95, 16)  True    93,71,498     94,26,390     1.88s       solved        No        485.06s
(76, 63)  True    93,71,498     97,48,434     2.66s       limit         No        505.14s
(34, 5)   True    93,71,498     93,96,326     1.2s        solved        No        519.98s
(142, 32) True    93,71,498     93,73,350     1.12s       solved        No        531.5s
(110, 90) True    93,71,498     96,64,785     1.53s       solved        No        546.83s
(22, 26)  True    93,71,498     1,26,08,598   2.62s       limit         No        566.63s
(58, 21)  True    93,71,498     93,70,059     1.31s       solved        Yes       577.16s

visited_nodes: [148, 149, 150, 153, 155, 135, 141, 124, 151, 129, 130, 9, 27, 82, 146, 3, 103, 57, 116, 75, 25, 20, 100, 59, 121, 102, 58, 76, 16, 63, 5, 32, 90, 26, 21]

**********************************************************************************************
Iteration : 6 

self.sorted_nodes: [64, 65, 79, 22, 2, 52, 42, 112, 4, 123] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(99, 64)  True    93,70,059     99,63,886     1.36s       infeasible    No        587.89s
(45, 65)  True    93,70,059     93,76,692     0.17s       solved        No        593.27s
(112, 79) True    93,70,059     95,53,809     1.17s       solved        No        607.34s
(24, 22)  True    93,70,059     1,03,07,971   2.66s       limit         No        627.79s
(86, 2)   True    93,70,059     93,74,565     2.16s       solved        No        642.09s
(34, 52)  True    93,70,059     94,06,501     1.27s       solved        No        653.41s
(94, 42)  True    93,70,059     1,34,02,702   2.33s       limit         No        671.83s
(23, 112) True    93,70,059     94,69,766     2.38s       solved        No        688.05s
(84, 4)   True    93,70,059     93,84,977     1.91s       solved        No        701.97s
(147, 123)True    93,70,059     96,86,193     1.78s       solved        No        714.75s

**********************************Final best results******************************************

Water Network: d10_HG_SP_5_5
*******************************************************************************

Constraint violations:


Total absolute constraint violation: 4.999804136792408e-16
Total relative constraint violation: 1.2423494289055156e-10
*******************************************************************************

Final best objective: 9370059.063683474
Number of nlp problem solved: 322
Total number of iteration: 6
Solver_time: 668.24 seconds
Heuristic elapsed time: 714.75 seconds

