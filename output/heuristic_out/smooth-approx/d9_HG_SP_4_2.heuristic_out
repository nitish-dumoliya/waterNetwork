Water Network: d9_HG_SP_4_2 

Testing bound_push=0.0061182796888640464, bound_frac=0.0005729980699211459
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0061182796888640464
bound_frac = 0.0005729980699211459
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8984495.441862546
Testing bound_push=0.005332864050423501, bound_frac=0.00845107658598987
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.005332864050423501
bound_frac = 0.00845107658598987
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8961855.515507294
Testing bound_push=0.009869674541584689, bound_frac=0.008456126501720467
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.009869674541584689
bound_frac = 0.008456126501720467
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8988919.851275023
Testing bound_push=0.0017389177660595834, bound_frac=0.009818376201946692
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0017389177660595834
bound_frac = 0.009818376201946692
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8987434.052130237
Testing bound_push=0.008401872638880795, bound_frac=0.01
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.008401872638880795
bound_frac = 0.01
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 8989445.898456503
Testing bound_push=0.0004732032277469107, bound_frac=0.00995411604173307
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.0004732032277469107
bound_frac = 0.00995411604173307
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Total cost: 9012151.731604455
Stopping search: maximum iterations reached --> 2
Solve the original nonconvex optimization problem using IPOPT 
fix_arc_set: {(13, 45), (122, 107), (107, 116), (132, 133), (142, 15), (140, 121), (7, 34), (88, 114), (127, 136), (98, 118), (120, 39), (116, 142), (118, 90), (30, 38), (137, 143), (139, 134), (136, 141), (131, 102), (15, 128), (124, 121), (34, 78), (128, 112), (121, 128), (133, 41), (38, 130)}
super_source_out_arc: [(1, 25), (1, 90), (1, 125)] 

min_demand: 0.0
max_demand: 0.122
max_flow: 0.86381996
eps: 1e-08 

Ipopt 3.14.13: outlev = 0
expect_infeasible_problem = yes
tol=1e-9
bound_relax_factor=0
bound_push = 0.005332864050423501
bound_frac = 0.00845107658598987
nlp_scaling_method = none


******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

 
Ipopt 3.14.13: Optimal Solution Found

suffix ipopt_zU_out OUT;
suffix ipopt_zL_out OUT;
Objective:  8961855.515507294
Solve_result:  solved
Solve_time: 5.700770999999996 


**********************************************************************************************
Iteration : 1 

self.sorted_nodes: [138, 143, 134, 126, 135, 123, 17, 54, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(115, 138)True    89,61,856     91,08,544     0.88s       solved        No        51.97s
(117, 143)True    89,61,856     92,71,181     0.63s       infeasible    No        57.94s
(141, 134)True    89,61,856     89,20,941     2.23s       solved        Yes       70.2s

visited_nodes: [138, 143, 134]

**********************************************************************************************
Iteration : 2 

self.sorted_nodes: [141, 126, 135, 123, 17, 54, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(134, 141)True    89,20,941     88,95,677     1.52s       solved        Yes       78.68s

visited_nodes: [138, 143, 134, 141]

**********************************************************************************************
Iteration : 3 

self.sorted_nodes: [126, 135, 123, 17, 54, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(11, 126) True    88,95,677     89,03,036     0.2s        solved        No        84.9s
(59, 135) True    88,95,677     90,87,444     2.7s        limit         No        104.11s
(50, 123) True    88,95,677     88,89,566     1.34s       solved        Yes       115.76s

visited_nodes: [138, 143, 134, 141, 126, 135, 123]

**********************************************************************************************
Iteration : 4 

self.sorted_nodes: [17, 112, 9, 83, 35, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 50, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 53, 91, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(41, 17)  True    88,89,566     89,73,606     0.49s       solved        No        122.46s
(105, 112)True    88,89,566     88,89,172     1.86s       solved        Yes       132.73s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112]

**********************************************************************************************
Iteration : 5 

self.sorted_nodes: [9, 83, 35, 29, 59, 93, 105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(29, 9)   True    88,89,172     89,85,101     2.62s       limit         No        147.3s
(39, 83)  True    88,89,172     90,91,956     2.5s        solved        No        160.37s
(44, 35)  True    88,89,172     88,77,799     0.76s       infeasible    No        166.53s
(103, 29) True    88,89,172     90,43,707     2.18s       solved        No        181.44s
(126, 59) True    88,89,172     89,35,362     2.09s       solved        No        195.26s
(61, 93)  True    88,89,172     88,52,644     1.62s       solved        Yes       205.3s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93]

**********************************************************************************************
Iteration : 6 

self.sorted_nodes: [105, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 50, 18, 68, 65, 77, 57, 23, 37, 101, 6, 24, 36, 61, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(108, 105)True    88,52,644     88,51,285     1.05s       solved        Yes       212.41s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105]

**********************************************************************************************
Iteration : 7 

self.sorted_nodes: [54, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 77, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(56, 54)  True    88,51,285     1,02,27,887   2.43s       limit         No        231.73s
(105, 108)True    88,51,285     88,46,331     1.04s       solved        Yes       241.89s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105, 54, 108]

**********************************************************************************************
Iteration : 8 

self.sorted_nodes: [109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(82, 109) True    88,46,331     88,52,335     2.12s       solved        No        256.75s
(6, 85)   True    88,46,331     93,88,571     2.58s       solved        No        275.86s
(37, 76)  True    88,46,331     89,07,624     0.59s       solved        No        286.45s
(109, 89) True    88,46,331     88,48,248     1.42s       solved        No        295.94s
(40, 43)  True    88,46,331     1,14,43,348   2.79s       limit         No        316.15s
(101, 104)True    88,46,331     88,78,183     1.36s       solved        No        326.44s
(48, 2)   True    88,46,331     88,55,481     2.07s       solved        No        338.25s
(51, 103) True    88,46,331     89,38,866     1.43s       solved        No        355.02s
(92, 114) True    88,46,331     88,51,972     1.04s       solved        No        359.95s
(28, 51)  True    88,46,331     88,87,641     1.74s       solved        No        371.32s
(114, 5)  True    88,46,331     88,52,589     1.41s       solved        No        382.28s
(74, 60)  True    88,46,331     98,05,573     1.34s       solved        No        394.88s
(25, 49)  True    88,46,331     1,26,98,565   2.61s       limit         No        412.14s
(36, 42)  True    88,46,331     1,01,43,208   2.66s       limit         No        430.27s
(26, 74)  True    88,46,331     1,20,15,398   2.58s       limit         No        449.73s
(28, 111) True    88,46,331     88,47,925     1.17s       solved        No        459.39s
(73, 28)  True    88,46,331     88,51,448     0.89s       solved        No        466.16s
(60, 58)  True    88,46,331     90,89,794     1.73s       solved        No        481.56s
(4, 18)   True    88,46,331     88,47,430     1.71s       solved        No        492.74s
(21, 68)  True    88,46,331     88,49,351     0.3s        solved        No        500.0s
(23, 65)  True    88,46,331     88,48,709     1.31s       solved        No        507.49s
(77, 57)  True    88,46,331     89,22,032     2.14s       solved        No        520.99s
(18, 23)  True    88,46,331     88,49,004     0.91s       solved        No        527.54s
(31, 37)  True    88,46,331     88,68,730     1.57s       solved        No        541.63s
(70, 101) True    88,46,331     89,89,514     2.58s       limit         No        560.69s
(80, 6)   True    88,46,331     88,48,714     0.22s       solved        No        565.13s
(99, 24)  True    88,46,331     88,84,464     1.32s       solved        No        579.75s
(75, 36)  True    88,46,331     88,45,913     1.3s        solved        Yes       590.05s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105, 54, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36]

**********************************************************************************************
Iteration : 9 

self.sorted_nodes: [84, 77, 75, 47, 53, 100, 78, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(19, 84)  True    88,45,913     88,45,942     0.35s       solved        No        595.71s
(87, 77)  True    88,45,913     88,45,781     0.2s        solved        Yes       600.23s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105, 54, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 84, 77]

**********************************************************************************************
Iteration : 10 

self.sorted_nodes: [4, 47, 53, 100, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(50, 4)   True    88,45,781     88,45,783     1.38s       solved        No        610.54s
(96, 47)  True    88,45,781     89,60,168     1.89s       solved        No        624.51s
(47, 53)  True    88,45,781     88,48,923     1.74s       solved        No        636.27s
(55, 100) True    88,45,781     88,45,738     0.58s       solved        Yes       641.12s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105, 54, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 84, 77, 4, 47, 53, 100]

**********************************************************************************************
Iteration : 11 

self.sorted_nodes: [55, 78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(100, 55) True    88,45,738     88,45,210     1.06s       solved        Yes       649.76s

visited_nodes: [138, 143, 134, 141, 126, 135, 123, 17, 112, 9, 83, 35, 29, 59, 93, 105, 54, 108, 109, 85, 76, 89, 43, 104, 2, 103, 114, 51, 5, 60, 49, 42, 74, 111, 28, 58, 18, 68, 65, 57, 23, 37, 101, 6, 24, 36, 84, 77, 4, 47, 53, 100, 55]

**********************************************************************************************
Iteration : 12 

self.sorted_nodes: [78, 87, 11, 63, 115] 

Arc       Acyclic C_Best_Sol    New_Sol       Solve_Time  Solve_Result  Improved  Time        
(53, 78)  True    88,45,210     88,46,145     0.2s        solved        No        652.57s
(91, 87)  True    88,45,210     88,86,462     1.84s       solved        No        663.86s
(48, 11)  True    88,45,210     88,45,815     0.19s       solved        No        667.84s
(87, 63)  True    88,45,210     88,75,140     1.97s       solved        No        681.54s
(119, 115)True    88,45,210     89,27,236     1.13s       solved        No        690.2s

**********************************Final best results******************************************

Water Network: d9_HG_SP_4_2
*******************************************************************************

Constraint violations:


Total absolute constraint violation: 4.486306011013266e-16
Total relative constraint violation: 7.949367001088841e-11
*******************************************************************************

Final best objective: 8845210.44235469
Number of nlp problem solved: 410
Total number of iteration: 12
Solver_time: 631.48 seconds
Heuristic elapsed time: 690.20 seconds

